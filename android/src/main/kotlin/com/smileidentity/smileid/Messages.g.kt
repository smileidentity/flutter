// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class FlutterJobType(val raw: Int) {
  BIOMETRIC_KYC(0);

  companion object {
    fun ofRaw(raw: Int): FlutterJobType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterPartnerParams (
  val jobType: FlutterJobType? = null,
  val jobId: String,
  val userId: String,
  val extras: Map<String?, String?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterPartnerParams {
      val jobType: FlutterJobType? = (list[0] as Int?)?.let {
        FlutterJobType.ofRaw(it)
      }
      val jobId = list[1] as String
      val userId = list[2] as String
      val extras = list[3] as Map<String?, String?>
      return FlutterPartnerParams(jobType, jobId, userId, extras)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      jobType?.raw,
      jobId,
      userId,
      extras,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterEnhancedKycRequest (
  val country: String,
  val idType: String,
  val idNumber: String,
  val firstName: String? = null,
  val middleName: String? = null,
  val lastName: String? = null,
  val dob: String? = null,
  val phoneNumber: String? = null,
  val bankCode: String? = null,
  val callbackUrl: String? = null,
  val partnerParams: FlutterPartnerParams,
  val partnerId: String,
  val sourceSdk: String,
  val sourceSdkVersion: String,
  val timestamp: String,
  val signature: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterEnhancedKycRequest {
      val country = list[0] as String
      val idType = list[1] as String
      val idNumber = list[2] as String
      val firstName = list[3] as String?
      val middleName = list[4] as String?
      val lastName = list[5] as String?
      val dob = list[6] as String?
      val phoneNumber = list[7] as String?
      val bankCode = list[8] as String?
      val callbackUrl = list[9] as String?
      val partnerParams = FlutterPartnerParams.fromList(list[10] as List<Any?>)
      val partnerId = list[11] as String
      val sourceSdk = list[12] as String
      val sourceSdkVersion = list[13] as String
      val timestamp = list[14] as String
      val signature = list[15] as String
      return FlutterEnhancedKycRequest(country, idType, idNumber, firstName, middleName, lastName, dob, phoneNumber, bankCode, callbackUrl, partnerParams, partnerId, sourceSdk, sourceSdkVersion, timestamp, signature)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      phoneNumber,
      bankCode,
      callbackUrl,
      partnerParams.toList(),
      partnerId,
      sourceSdk,
      sourceSdkVersion,
      timestamp,
      signature,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterEnhancedKycAsyncResponse (
  val success: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterEnhancedKycAsyncResponse {
      val success = list[0] as Boolean
      return FlutterEnhancedKycAsyncResponse(success)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      success,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object SmileIdApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterEnhancedKycAsyncResponse.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterEnhancedKycRequest.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterPartnerParams.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is FlutterEnhancedKycAsyncResponse -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is FlutterEnhancedKycRequest -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is FlutterPartnerParams -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface SmileIdApi {
  fun getPlatformVersion(callback: (Result<String?>) -> Unit)
  fun initialize(callback: (Result<Unit>) -> Unit)
  fun doEnhancedKycAsync(request: FlutterEnhancedKycRequest, callback: (Result<FlutterEnhancedKycAsyncResponse?>) -> Unit)

  companion object {
    /** The codec used by SmileIdApi. */
    val codec: MessageCodec<Any?> by lazy {
      SmileIdApiCodec
    }
    /** Sets up an instance of `SmileIdApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: SmileIdApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIdApi.getPlatformVersion", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getPlatformVersion() { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIdApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.initialize() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIdApi.doEnhancedKycAsync", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterEnhancedKycRequest
            api.doEnhancedKycAsync(requestArg) { result: Result<FlutterEnhancedKycAsyncResponse?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
