// Autogenerated from Pigeon (v14.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class FlutterJobType(val raw: Int) {
  ENHANCEDKYC(0),
  DOCUMENTVERIFICATION(1);

  companion object {
    fun ofRaw(raw: Int): FlutterJobType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FlutterImageType(val raw: Int) {
  SELFIEJPGFILE(0),
  IDCARDJPGFILE(1),
  SELFIEJPGBASE64(2),
  IDCARDJPGBASE64(3),
  LIVENESSJPGFILE(4),
  IDCARDREARJPGFILE(5),
  LIVENESSJPGBASE64(6),
  IDCARDREARJPGBASE64(7);

  companion object {
    fun ofRaw(raw: Int): FlutterImageType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FlutterActionResult(val raw: Int) {
  PASSED(0),
  COMPLETED(1),
  APPROVED(2),
  VERIFIED(3),
  PROVISIONALLYAPPROVED(4),
  RETURNED(5),
  NOTRETURNED(6),
  FAILED(7),
  REJECTED(8),
  UNDERREVIEW(9),
  UNABLETODETERMINE(10),
  NOTAPPLICABLE(11),
  NOTVERIFIED(12),
  NOTDONE(13),
  ISSUERUNAVAILABLE(14),
  UNKNOWN(15);

  companion object {
    fun ofRaw(raw: Int): FlutterActionResult? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 *  Custom values specific to partners can be placed in [extras]
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class FlutterPartnerParams (
  val jobType: FlutterJobType? = null,
  val jobId: String,
  val userId: String,
  val extras: Map<String?, String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterPartnerParams {
      val jobType: FlutterJobType? = (list[0] as Int?)?.let {
        FlutterJobType.ofRaw(it)
      }
      val jobId = list[1] as String
      val userId = list[2] as String
      val extras = list[3] as Map<String?, String?>?
      return FlutterPartnerParams(jobType, jobId, userId, extras)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      jobType?.raw,
      jobId,
      userId,
      extras,
    )
  }
}

/**
 * The Auth Smile request. Auth Smile serves multiple purposes:
 *
 * - It is used to fetch the signature needed for subsequent API requests
 * - It indicates the type of job that will being performed
 * - It is used to fetch consent information for the partner
 *
 * [jobType] The type of job that will be performed
 * [country] The country code of the country where the job is being performed. This value is
 * required in order to get back consent information for the partner
 * [idType] The type of ID that will be used for the job. This value is required in order to
 * get back consent information for the partner
 * [updateEnrolledImage] Whether or not the enrolled image should be updated with image
 * submitted for this job
 * [jobId] The job ID to associate with the job. Most often, this will correspond to a unique
 * Job ID within your own system. If not provided, a random job ID will be generated
 * [userId] The user ID to associate with the job. Most often, this will correspond to a unique
 * User ID within your own system. If not provided, a random user ID will be generated
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class FlutterAuthenticationRequest (
  val jobType: FlutterJobType,
  val country: String? = null,
  val idType: String? = null,
  val updateEnrolledImage: Boolean? = null,
  val jobId: String? = null,
  val userId: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterAuthenticationRequest {
      val jobType = FlutterJobType.ofRaw(list[0] as Int)!!
      val country = list[1] as String?
      val idType = list[2] as String?
      val updateEnrolledImage = list[3] as Boolean?
      val jobId = list[4] as String?
      val userId = list[5] as String?
      return FlutterAuthenticationRequest(jobType, country, idType, updateEnrolledImage, jobId, userId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      jobType.raw,
      country,
      idType,
      updateEnrolledImage,
      jobId,
      userId,
    )
  }
}

/**
 * [consentInfo] is only populated when a country and ID type are provided in the
 * [FlutterAuthenticationRequest]. To get information about *all* countries and ID types instead,
 *  [SmileIDService.getProductsConfig]
 *
 * [timestamp] is *not* a [DateTime] because technically, any arbitrary value could have been
 * passed to it. This applies to all other timestamp fields in the SDK.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class FlutterAuthenticationResponse (
  val success: Boolean,
  val signature: String,
  val timestamp: String,
  val partnerParams: FlutterPartnerParams,
  val callbackUrl: String? = null,
  val consentInfo: FlutterConsentInfo? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterAuthenticationResponse {
      val success = list[0] as Boolean
      val signature = list[1] as String
      val timestamp = list[2] as String
      val partnerParams = FlutterPartnerParams.fromList(list[3] as List<Any?>)
      val callbackUrl = list[4] as String?
      val consentInfo: FlutterConsentInfo? = (list[5] as List<Any?>?)?.let {
        FlutterConsentInfo.fromList(it)
      }
      return FlutterAuthenticationResponse(success, signature, timestamp, partnerParams, callbackUrl, consentInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      success,
      signature,
      timestamp,
      partnerParams.toList(),
      callbackUrl,
      consentInfo?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterPrepUploadRequest (
  val partnerParams: FlutterPartnerParams,
  val callbackUrl: String? = null,
  val partnerId: String,
  val timestamp: String,
  val signature: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterPrepUploadRequest {
      val partnerParams = FlutterPartnerParams.fromList(list[0] as List<Any?>)
      val callbackUrl = list[1] as String?
      val partnerId = list[2] as String
      val timestamp = list[3] as String
      val signature = list[4] as String
      return FlutterPrepUploadRequest(partnerParams, callbackUrl, partnerId, timestamp, signature)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      partnerParams.toList(),
      callbackUrl,
      partnerId,
      timestamp,
      signature,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterPrepUploadResponse (
  val code: String,
  val refId: String,
  val uploadUrl: String,
  val smileJobId: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterPrepUploadResponse {
      val code = list[0] as String
      val refId = list[1] as String
      val uploadUrl = list[2] as String
      val smileJobId = list[3] as String
      return FlutterPrepUploadResponse(code, refId, uploadUrl, smileJobId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code,
      refId,
      uploadUrl,
      smileJobId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterUploadRequest (
  val images: List<FlutterUploadImageInfo?>,
  val idInfo: FlutterIdInfo? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterUploadRequest {
      val images = list[0] as List<FlutterUploadImageInfo?>
      val idInfo: FlutterIdInfo? = (list[1] as List<Any?>?)?.let {
        FlutterIdInfo.fromList(it)
      }
      return FlutterUploadRequest(images, idInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      images,
      idInfo?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterUploadImageInfo (
  val imageTypeId: FlutterImageType,
  val imageName: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterUploadImageInfo {
      val imageTypeId = FlutterImageType.ofRaw(list[0] as Int)!!
      val imageName = list[1] as String
      return FlutterUploadImageInfo(imageTypeId, imageName)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      imageTypeId.raw,
      imageName,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterIdInfo (
  val country: String,
  val idType: String? = null,
  val idNumber: String? = null,
  val firstName: String? = null,
  val middleName: String? = null,
  val lastName: String? = null,
  val dob: String? = null,
  val bankCode: String? = null,
  val entered: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterIdInfo {
      val country = list[0] as String
      val idType = list[1] as String?
      val idNumber = list[2] as String?
      val firstName = list[3] as String?
      val middleName = list[4] as String?
      val lastName = list[5] as String?
      val dob = list[6] as String?
      val bankCode = list[7] as String?
      val entered = list[8] as Boolean?
      return FlutterIdInfo(country, idType, idNumber, firstName, middleName, lastName, dob, bankCode, entered)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      bankCode,
      entered,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterEnhancedKycResponse (
  val smileJobId: String,
  val partnerParams: FlutterPartnerParams,
  val resultText: String,
  val resultCode: String,
  val actions: FlutterActions,
  val country: String,
  val idType: String,
  val idNumber: String,
  val fullName: String? = null,
  val expirationDate: String? = null,
  val dob: String? = null,
  val base64Photo: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterEnhancedKycResponse {
      val smileJobId = list[0] as String
      val partnerParams = FlutterPartnerParams.fromList(list[1] as List<Any?>)
      val resultText = list[2] as String
      val resultCode = list[3] as String
      val actions = FlutterActions.fromList(list[4] as List<Any?>)
      val country = list[5] as String
      val idType = list[6] as String
      val idNumber = list[7] as String
      val fullName = list[8] as String?
      val expirationDate = list[9] as String?
      val dob = list[10] as String?
      val base64Photo = list[11] as String?
      return FlutterEnhancedKycResponse(smileJobId, partnerParams, resultText, resultCode, actions, country, idType, idNumber, fullName, expirationDate, dob, base64Photo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      smileJobId,
      partnerParams.toList(),
      resultText,
      resultCode,
      actions.toList(),
      country,
      idType,
      idNumber,
      fullName,
      expirationDate,
      dob,
      base64Photo,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterActions (
  val documentCheck: FlutterActionResult,
  val humanReviewCompare: FlutterActionResult,
  val humanReviewDocumentCheck: FlutterActionResult,
  val humanReviewLivenessCheck: FlutterActionResult,
  val humanReviewSelfieCheck: FlutterActionResult,
  val humanReviewUpdateSelfie: FlutterActionResult,
  val livenessCheck: FlutterActionResult,
  val registerSelfie: FlutterActionResult,
  val returnPersonalInfo: FlutterActionResult,
  val selfieCheck: FlutterActionResult,
  val selfieProvided: FlutterActionResult,
  val selfieToIdAuthorityCompare: FlutterActionResult,
  val selfieToIdCardCompare: FlutterActionResult,
  val selfieToRegisteredSelfieCompare: FlutterActionResult,
  val updateRegisteredSelfieOnFile: FlutterActionResult,
  val verifyDocument: FlutterActionResult,
  val verifyIdNumber: FlutterActionResult

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterActions {
      val documentCheck = FlutterActionResult.ofRaw(list[0] as Int)!!
      val humanReviewCompare = FlutterActionResult.ofRaw(list[1] as Int)!!
      val humanReviewDocumentCheck = FlutterActionResult.ofRaw(list[2] as Int)!!
      val humanReviewLivenessCheck = FlutterActionResult.ofRaw(list[3] as Int)!!
      val humanReviewSelfieCheck = FlutterActionResult.ofRaw(list[4] as Int)!!
      val humanReviewUpdateSelfie = FlutterActionResult.ofRaw(list[5] as Int)!!
      val livenessCheck = FlutterActionResult.ofRaw(list[6] as Int)!!
      val registerSelfie = FlutterActionResult.ofRaw(list[7] as Int)!!
      val returnPersonalInfo = FlutterActionResult.ofRaw(list[8] as Int)!!
      val selfieCheck = FlutterActionResult.ofRaw(list[9] as Int)!!
      val selfieProvided = FlutterActionResult.ofRaw(list[10] as Int)!!
      val selfieToIdAuthorityCompare = FlutterActionResult.ofRaw(list[11] as Int)!!
      val selfieToIdCardCompare = FlutterActionResult.ofRaw(list[12] as Int)!!
      val selfieToRegisteredSelfieCompare = FlutterActionResult.ofRaw(list[13] as Int)!!
      val updateRegisteredSelfieOnFile = FlutterActionResult.ofRaw(list[14] as Int)!!
      val verifyDocument = FlutterActionResult.ofRaw(list[15] as Int)!!
      val verifyIdNumber = FlutterActionResult.ofRaw(list[16] as Int)!!
      return FlutterActions(documentCheck, humanReviewCompare, humanReviewDocumentCheck, humanReviewLivenessCheck, humanReviewSelfieCheck, humanReviewUpdateSelfie, livenessCheck, registerSelfie, returnPersonalInfo, selfieCheck, selfieProvided, selfieToIdAuthorityCompare, selfieToIdCardCompare, selfieToRegisteredSelfieCompare, updateRegisteredSelfieOnFile, verifyDocument, verifyIdNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      documentCheck.raw,
      humanReviewCompare.raw,
      humanReviewDocumentCheck.raw,
      humanReviewLivenessCheck.raw,
      humanReviewSelfieCheck.raw,
      humanReviewUpdateSelfie.raw,
      livenessCheck.raw,
      registerSelfie.raw,
      returnPersonalInfo.raw,
      selfieCheck.raw,
      selfieProvided.raw,
      selfieToIdAuthorityCompare.raw,
      selfieToIdCardCompare.raw,
      selfieToRegisteredSelfieCompare.raw,
      updateRegisteredSelfieOnFile.raw,
      verifyDocument.raw,
      verifyIdNumber.raw,
    )
  }
}

/**
 * [canAccess] Whether or not the ID type is enabled for the partner
 * [consentRequired] Whether or not consent is required for the ID type
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class FlutterConsentInfo (
  val canAccess: Boolean,
  val consentRequired: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterConsentInfo {
      val canAccess = list[0] as Boolean
      val consentRequired = list[1] as Boolean
      return FlutterConsentInfo(canAccess, consentRequired)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      canAccess,
      consentRequired,
    )
  }
}

/**
 * [timestamp] is *not* a [DateTime] because technically, any arbitrary value could have been
 * passed to it. This applies to all other timestamp fields in the SDK.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class FlutterEnhancedKycRequest (
  val country: String,
  val idType: String,
  val idNumber: String,
  val firstName: String? = null,
  val middleName: String? = null,
  val lastName: String? = null,
  val dob: String? = null,
  val phoneNumber: String? = null,
  val bankCode: String? = null,
  val callbackUrl: String? = null,
  val partnerParams: FlutterPartnerParams,
  val timestamp: String,
  val signature: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterEnhancedKycRequest {
      val country = list[0] as String
      val idType = list[1] as String
      val idNumber = list[2] as String
      val firstName = list[3] as String?
      val middleName = list[4] as String?
      val lastName = list[5] as String?
      val dob = list[6] as String?
      val phoneNumber = list[7] as String?
      val bankCode = list[8] as String?
      val callbackUrl = list[9] as String?
      val partnerParams = FlutterPartnerParams.fromList(list[10] as List<Any?>)
      val timestamp = list[11] as String
      val signature = list[12] as String
      return FlutterEnhancedKycRequest(country, idType, idNumber, firstName, middleName, lastName, dob, phoneNumber, bankCode, callbackUrl, partnerParams, timestamp, signature)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      phoneNumber,
      bankCode,
      callbackUrl,
      partnerParams.toList(),
      timestamp,
      signature,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterEnhancedKycAsyncResponse (
  val success: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterEnhancedKycAsyncResponse {
      val success = list[0] as Boolean
      return FlutterEnhancedKycAsyncResponse(success)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      success,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterImageLinks (
  val selfieImageUrl: String? = null,
  val error: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterImageLinks {
      val selfieImageUrl = list[0] as String?
      val error = list[1] as String?
      return FlutterImageLinks(selfieImageUrl, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      selfieImageUrl,
      error,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterAntifraud (
  val suspectUsers: List<FlutterSuspectUser?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterAntifraud {
      val suspectUsers = list[0] as List<FlutterSuspectUser?>
      return FlutterAntifraud(suspectUsers)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      suspectUsers,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterSuspectUser (
  val reason: String,
  val userId: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterSuspectUser {
      val reason = list[0] as String
      val userId = list[1] as String
      return FlutterSuspectUser(reason, userId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reason,
      userId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterJobStatusRequest (
  val userId: String,
  val jobId: String,
  val includeImageLinks: Boolean,
  val includeHistory: Boolean,
  val partnerId: String,
  val timestamp: String,
  val signature: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterJobStatusRequest {
      val userId = list[0] as String
      val jobId = list[1] as String
      val includeImageLinks = list[2] as Boolean
      val includeHistory = list[3] as Boolean
      val partnerId = list[4] as String
      val timestamp = list[5] as String
      val signature = list[6] as String
      return FlutterJobStatusRequest(userId, jobId, includeImageLinks, includeHistory, partnerId, timestamp, signature)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userId,
      jobId,
      includeImageLinks,
      includeHistory,
      partnerId,
      timestamp,
      signature,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterSmartSelfieJobResult (
  val actions: FlutterActions,
  val resultCode: String,
  val resultText: String,
  val smileJobId: String,
  val partnerParams: FlutterPartnerParams,
  val confidence: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterSmartSelfieJobResult {
      val actions = FlutterActions.fromList(list[0] as List<Any?>)
      val resultCode = list[1] as String
      val resultText = list[2] as String
      val smileJobId = list[3] as String
      val partnerParams = FlutterPartnerParams.fromList(list[4] as List<Any?>)
      val confidence = list[5] as Double?
      return FlutterSmartSelfieJobResult(actions, resultCode, resultText, smileJobId, partnerParams, confidence)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      actions.toList(),
      resultCode,
      resultText,
      smileJobId,
      partnerParams.toList(),
      confidence,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterSmartSelfieJobStatusResponse (
  val timestamp: String,
  val jobComplete: Boolean,
  val jobSuccess: Boolean,
  val code: String,
  val result: FlutterSmartSelfieJobResult? = null,
  val resultString: String? = null,
  val history: List<FlutterSmartSelfieJobResult?>? = null,
  val imageLinks: FlutterImageLinks? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterSmartSelfieJobStatusResponse {
      val timestamp = list[0] as String
      val jobComplete = list[1] as Boolean
      val jobSuccess = list[2] as Boolean
      val code = list[3] as String
      val result: FlutterSmartSelfieJobResult? = (list[4] as List<Any?>?)?.let {
        FlutterSmartSelfieJobResult.fromList(it)
      }
      val resultString = list[5] as String?
      val history = list[6] as List<FlutterSmartSelfieJobResult?>?
      val imageLinks: FlutterImageLinks? = (list[7] as List<Any?>?)?.let {
        FlutterImageLinks.fromList(it)
      }
      return FlutterSmartSelfieJobStatusResponse(timestamp, jobComplete, jobSuccess, code, result, resultString, history, imageLinks)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result?.toList(),
      resultString,
      history,
      imageLinks?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterDocumentVerificationJobResult (
  val actions: FlutterActions,
  val resultCode: String,
  val resultText: String,
  val smileJobId: String,
  val partnerParams: FlutterPartnerParams,
  val country: String? = null,
  val idType: String? = null,
  val idNumber: String? = null,
  val fullName: String? = null,
  val dob: String? = null,
  val gender: String? = null,
  val expirationDate: String? = null,
  val documentImageBase64: String? = null,
  val phoneNumber: String? = null,
  val phoneNumber2: String? = null,
  val address: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterDocumentVerificationJobResult {
      val actions = FlutterActions.fromList(list[0] as List<Any?>)
      val resultCode = list[1] as String
      val resultText = list[2] as String
      val smileJobId = list[3] as String
      val partnerParams = FlutterPartnerParams.fromList(list[4] as List<Any?>)
      val country = list[5] as String?
      val idType = list[6] as String?
      val idNumber = list[7] as String?
      val fullName = list[8] as String?
      val dob = list[9] as String?
      val gender = list[10] as String?
      val expirationDate = list[11] as String?
      val documentImageBase64 = list[12] as String?
      val phoneNumber = list[13] as String?
      val phoneNumber2 = list[14] as String?
      val address = list[15] as String?
      return FlutterDocumentVerificationJobResult(actions, resultCode, resultText, smileJobId, partnerParams, country, idType, idNumber, fullName, dob, gender, expirationDate, documentImageBase64, phoneNumber, phoneNumber2, address)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      actions.toList(),
      resultCode,
      resultText,
      smileJobId,
      partnerParams.toList(),
      country,
      idType,
      idNumber,
      fullName,
      dob,
      gender,
      expirationDate,
      documentImageBase64,
      phoneNumber,
      phoneNumber2,
      address,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterDocumentVerificationJobStatusResponse (
  val timestamp: String,
  val jobComplete: Boolean,
  val jobSuccess: Boolean,
  val code: String,
  val result: FlutterDocumentVerificationJobResult? = null,
  val resultString: String? = null,
  val history: List<FlutterDocumentVerificationJobResult?>? = null,
  val imageLinks: FlutterImageLinks? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterDocumentVerificationJobStatusResponse {
      val timestamp = list[0] as String
      val jobComplete = list[1] as Boolean
      val jobSuccess = list[2] as Boolean
      val code = list[3] as String
      val result: FlutterDocumentVerificationJobResult? = (list[4] as List<Any?>?)?.let {
        FlutterDocumentVerificationJobResult.fromList(it)
      }
      val resultString = list[5] as String?
      val history = list[6] as List<FlutterDocumentVerificationJobResult?>?
      val imageLinks: FlutterImageLinks? = (list[7] as List<Any?>?)?.let {
        FlutterImageLinks.fromList(it)
      }
      return FlutterDocumentVerificationJobStatusResponse(timestamp, jobComplete, jobSuccess, code, result, resultString, history, imageLinks)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result?.toList(),
      resultString,
      history,
      imageLinks?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterBiometricKycJobResult (
  val actions: FlutterActions,
  val resultCode: String,
  val resultText: String,
  val resultType: String,
  val smileJobId: String,
  val partnerParams: FlutterPartnerParams,
  val antifraud: FlutterAntifraud? = null,
  val dob: String? = null,
  val photoBase64: String? = null,
  val gender: String? = null,
  val idType: String? = null,
  val address: String? = null,
  val country: String? = null,
  val documentImageBase64: String? = null,
  val fullData: Map<String?, String?>? = null,
  val fullName: String? = null,
  val idNumber: String? = null,
  val phoneNumber: String? = null,
  val phoneNumber2: String? = null,
  val expirationDate: String? = null,
  val secondaryIdNumber: String? = null,
  val idNumberPreviouslyRegistered: Boolean? = null,
  val previousRegistrantsUserIds: List<String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterBiometricKycJobResult {
      val actions = FlutterActions.fromList(list[0] as List<Any?>)
      val resultCode = list[1] as String
      val resultText = list[2] as String
      val resultType = list[3] as String
      val smileJobId = list[4] as String
      val partnerParams = FlutterPartnerParams.fromList(list[5] as List<Any?>)
      val antifraud: FlutterAntifraud? = (list[6] as List<Any?>?)?.let {
        FlutterAntifraud.fromList(it)
      }
      val dob = list[7] as String?
      val photoBase64 = list[8] as String?
      val gender = list[9] as String?
      val idType = list[10] as String?
      val address = list[11] as String?
      val country = list[12] as String?
      val documentImageBase64 = list[13] as String?
      val fullData = list[14] as Map<String?, String?>?
      val fullName = list[15] as String?
      val idNumber = list[16] as String?
      val phoneNumber = list[17] as String?
      val phoneNumber2 = list[18] as String?
      val expirationDate = list[19] as String?
      val secondaryIdNumber = list[20] as String?
      val idNumberPreviouslyRegistered = list[21] as Boolean?
      val previousRegistrantsUserIds = list[22] as List<String?>?
      return FlutterBiometricKycJobResult(actions, resultCode, resultText, resultType, smileJobId, partnerParams, antifraud, dob, photoBase64, gender, idType, address, country, documentImageBase64, fullData, fullName, idNumber, phoneNumber, phoneNumber2, expirationDate, secondaryIdNumber, idNumberPreviouslyRegistered, previousRegistrantsUserIds)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      actions.toList(),
      resultCode,
      resultText,
      resultType,
      smileJobId,
      partnerParams.toList(),
      antifraud?.toList(),
      dob,
      photoBase64,
      gender,
      idType,
      address,
      country,
      documentImageBase64,
      fullData,
      fullName,
      idNumber,
      phoneNumber,
      phoneNumber2,
      expirationDate,
      secondaryIdNumber,
      idNumberPreviouslyRegistered,
      previousRegistrantsUserIds,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterBiometricKycJobStatusResponse (
  val timestamp: String,
  val jobComplete: Boolean,
  val jobSuccess: Boolean,
  val code: String,
  val result: FlutterBiometricKycJobResult? = null,
  val resultString: String? = null,
  val history: List<FlutterBiometricKycJobResult?>? = null,
  val imageLinks: FlutterImageLinks? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterBiometricKycJobStatusResponse {
      val timestamp = list[0] as String
      val jobComplete = list[1] as Boolean
      val jobSuccess = list[2] as Boolean
      val code = list[3] as String
      val result: FlutterBiometricKycJobResult? = (list[4] as List<Any?>?)?.let {
        FlutterBiometricKycJobResult.fromList(it)
      }
      val resultString = list[5] as String?
      val history = list[6] as List<FlutterBiometricKycJobResult?>?
      val imageLinks: FlutterImageLinks? = (list[7] as List<Any?>?)?.let {
        FlutterImageLinks.fromList(it)
      }
      return FlutterBiometricKycJobStatusResponse(timestamp, jobComplete, jobSuccess, code, result, resultString, history, imageLinks)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result?.toList(),
      resultString,
      history,
      imageLinks?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterEnhancedDocumentVerificationJobResult (
  val actions: FlutterActions,
  val resultCode: String,
  val resultText: String,
  val resultType: String,
  val smileJobId: String,
  val partnerParams: FlutterPartnerParams,
  val antifraud: FlutterAntifraud? = null,
  val dob: String? = null,
  val photoBase64: String? = null,
  val gender: String? = null,
  val idType: String? = null,
  val address: String? = null,
  val country: String? = null,
  val documentImageBase64: String? = null,
  val fullData: Map<String?, String?>? = null,
  val fullName: String? = null,
  val idNumber: String? = null,
  val phoneNumber: String? = null,
  val phoneNumber2: String? = null,
  val expirationDate: String? = null,
  val secondaryIdNumber: String? = null,
  val idNumberPreviouslyRegistered: Boolean? = null,
  val previousRegistrantsUserIds: List<String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterEnhancedDocumentVerificationJobResult {
      val actions = FlutterActions.fromList(list[0] as List<Any?>)
      val resultCode = list[1] as String
      val resultText = list[2] as String
      val resultType = list[3] as String
      val smileJobId = list[4] as String
      val partnerParams = FlutterPartnerParams.fromList(list[5] as List<Any?>)
      val antifraud: FlutterAntifraud? = (list[6] as List<Any?>?)?.let {
        FlutterAntifraud.fromList(it)
      }
      val dob = list[7] as String?
      val photoBase64 = list[8] as String?
      val gender = list[9] as String?
      val idType = list[10] as String?
      val address = list[11] as String?
      val country = list[12] as String?
      val documentImageBase64 = list[13] as String?
      val fullData = list[14] as Map<String?, String?>?
      val fullName = list[15] as String?
      val idNumber = list[16] as String?
      val phoneNumber = list[17] as String?
      val phoneNumber2 = list[18] as String?
      val expirationDate = list[19] as String?
      val secondaryIdNumber = list[20] as String?
      val idNumberPreviouslyRegistered = list[21] as Boolean?
      val previousRegistrantsUserIds = list[22] as List<String?>?
      return FlutterEnhancedDocumentVerificationJobResult(actions, resultCode, resultText, resultType, smileJobId, partnerParams, antifraud, dob, photoBase64, gender, idType, address, country, documentImageBase64, fullData, fullName, idNumber, phoneNumber, phoneNumber2, expirationDate, secondaryIdNumber, idNumberPreviouslyRegistered, previousRegistrantsUserIds)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      actions.toList(),
      resultCode,
      resultText,
      resultType,
      smileJobId,
      partnerParams.toList(),
      antifraud?.toList(),
      dob,
      photoBase64,
      gender,
      idType,
      address,
      country,
      documentImageBase64,
      fullData,
      fullName,
      idNumber,
      phoneNumber,
      phoneNumber2,
      expirationDate,
      secondaryIdNumber,
      idNumberPreviouslyRegistered,
      previousRegistrantsUserIds,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterEnhancedDocumentVerificationJobStatusResponse (
  val timestamp: String,
  val jobComplete: Boolean,
  val jobSuccess: Boolean,
  val code: String,
  val result: FlutterEnhancedDocumentVerificationJobResult? = null,
  val resultString: String? = null,
  val history: List<FlutterEnhancedDocumentVerificationJobResult?>? = null,
  val imageLinks: FlutterImageLinks? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterEnhancedDocumentVerificationJobStatusResponse {
      val timestamp = list[0] as String
      val jobComplete = list[1] as Boolean
      val jobSuccess = list[2] as Boolean
      val code = list[3] as String
      val result: FlutterEnhancedDocumentVerificationJobResult? = (list[4] as List<Any?>?)?.let {
        FlutterEnhancedDocumentVerificationJobResult.fromList(it)
      }
      val resultString = list[5] as String?
      val history = list[6] as List<FlutterEnhancedDocumentVerificationJobResult?>?
      val imageLinks: FlutterImageLinks? = (list[7] as List<Any?>?)?.let {
        FlutterImageLinks.fromList(it)
      }
      return FlutterEnhancedDocumentVerificationJobStatusResponse(timestamp, jobComplete, jobSuccess, code, result, resultString, history, imageLinks)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result?.toList(),
      resultString,
      history,
      imageLinks?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterProductsConfigRequest (
  val partnerId: String,
  val timestamp: String,
  val signature: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterProductsConfigRequest {
      val partnerId = list[0] as String
      val timestamp = list[1] as String
      val signature = list[2] as String
      return FlutterProductsConfigRequest(partnerId, timestamp, signature)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      partnerId,
      timestamp,
      signature,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterProductsConfigResponse (
  val consentRequired: Map<String?, List<String?>?>,
  val idSelection: FlutterIdSelection

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterProductsConfigResponse {
      val consentRequired = list[0] as Map<String?, List<String?>?>
      val idSelection = FlutterIdSelection.fromList(list[1] as List<Any?>)
      return FlutterProductsConfigResponse(consentRequired, idSelection)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentRequired,
      idSelection.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterIdSelection (
  val basicKyc: Map<String?, List<String?>?>,
  val biometricKyc: Map<String?, List<String?>?>,
  val enhancedKyc: Map<String?, List<String?>?>,
  val documentVerification: Map<String?, List<String?>?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterIdSelection {
      val basicKyc = list[0] as Map<String?, List<String?>?>
      val biometricKyc = list[1] as Map<String?, List<String?>?>
      val enhancedKyc = list[2] as Map<String?, List<String?>?>
      val documentVerification = list[3] as Map<String?, List<String?>?>
      return FlutterIdSelection(basicKyc, biometricKyc, enhancedKyc, documentVerification)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      basicKyc,
      biometricKyc,
      enhancedKyc,
      documentVerification,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterValidDocumentsResponse (
  val validDocuments: List<FlutterValidDocument?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterValidDocumentsResponse {
      val validDocuments = list[0] as List<FlutterValidDocument?>
      return FlutterValidDocumentsResponse(validDocuments)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      validDocuments,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterValidDocument (
  val country: FlutterCountry,
  val idTypes: List<FlutterIdType?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterValidDocument {
      val country = FlutterCountry.fromList(list[0] as List<Any?>)
      val idTypes = list[1] as List<FlutterIdType?>
      return FlutterValidDocument(country, idTypes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      country.toList(),
      idTypes,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterCountry (
  val code: String,
  val continent: String,
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterCountry {
      val code = list[0] as String
      val continent = list[1] as String
      val name = list[2] as String
      return FlutterCountry(code, continent, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code,
      continent,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterIdType (
  val code: String,
  val example: List<String?>,
  val hasBack: Boolean,
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterIdType {
      val code = list[0] as String
      val example = list[1] as List<String?>
      val hasBack = list[2] as Boolean
      val name = list[3] as String
      return FlutterIdType(code, example, hasBack, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code,
      example,
      hasBack,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterServicesResponse (
  val bankCodes: List<FlutterBankCode?>,
  val hostedWeb: FlutterHostedWeb

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterServicesResponse {
      val bankCodes = list[0] as List<FlutterBankCode?>
      val hostedWeb = FlutterHostedWeb.fromList(list[1] as List<Any?>)
      return FlutterServicesResponse(bankCodes, hostedWeb)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      bankCodes,
      hostedWeb.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterBankCode (
  val name: String,
  val code: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterBankCode {
      val name = list[0] as String
      val code = list[1] as String
      return FlutterBankCode(name, code)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      code,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterHostedWeb (
  val basicKyc: Map<String?, FlutterCountryInfo?>,
  val biometricKyc: Map<String?, FlutterCountryInfo?>,
  val enhancedKyc: Map<String?, FlutterCountryInfo?>,
  val documentVerification: Map<String?, FlutterCountryInfo?>,
  val enhancedKycSmartSelfie: Map<String?, FlutterCountryInfo?>,
  val enhancedDocumentVerification: Map<String?, FlutterCountryInfo?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterHostedWeb {
      val basicKyc = list[0] as Map<String?, FlutterCountryInfo?>
      val biometricKyc = list[1] as Map<String?, FlutterCountryInfo?>
      val enhancedKyc = list[2] as Map<String?, FlutterCountryInfo?>
      val documentVerification = list[3] as Map<String?, FlutterCountryInfo?>
      val enhancedKycSmartSelfie = list[4] as Map<String?, FlutterCountryInfo?>
      val enhancedDocumentVerification = list[5] as Map<String?, FlutterCountryInfo?>
      return FlutterHostedWeb(basicKyc, biometricKyc, enhancedKyc, documentVerification, enhancedKycSmartSelfie, enhancedDocumentVerification)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      basicKyc,
      biometricKyc,
      enhancedKyc,
      documentVerification,
      enhancedKycSmartSelfie,
      enhancedDocumentVerification,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterCountryInfo (
  val countryCode: String,
  val name: String,
  val availableIdTypes: List<FlutterAvailableIdType?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterCountryInfo {
      val countryCode = list[0] as String
      val name = list[1] as String
      val availableIdTypes = list[2] as List<FlutterAvailableIdType?>
      return FlutterCountryInfo(countryCode, name, availableIdTypes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      countryCode,
      name,
      availableIdTypes,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FlutterAvailableIdType (
  val idTypeKey: String,
  val label: String,
  val requiredFields: List<String?>,
  val testData: String? = null,
  val idNumberRegex: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FlutterAvailableIdType {
      val idTypeKey = list[0] as String
      val label = list[1] as String
      val requiredFields = list[2] as List<String?>
      val testData = list[3] as String?
      val idNumberRegex = list[4] as String?
      return FlutterAvailableIdType(idTypeKey, label, requiredFields, testData, idNumberRegex)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      idTypeKey,
      label,
      requiredFields,
      testData,
      idNumberRegex,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object SmileIDApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterActions.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterAntifraud.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterAuthenticationRequest.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterAuthenticationResponse.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterAvailableIdType.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterBankCode.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterBiometricKycJobResult.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterBiometricKycJobResult.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterBiometricKycJobStatusResponse.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterConsentInfo.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterCountry.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterCountryInfo.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterDocumentVerificationJobResult.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterDocumentVerificationJobResult.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterDocumentVerificationJobStatusResponse.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterEnhancedDocumentVerificationJobResult.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterEnhancedDocumentVerificationJobResult.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterEnhancedDocumentVerificationJobStatusResponse.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterEnhancedKycAsyncResponse.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterEnhancedKycRequest.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterEnhancedKycResponse.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterHostedWeb.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterIdInfo.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterIdSelection.fromList(it)
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterIdType.fromList(it)
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterImageLinks.fromList(it)
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterJobStatusRequest.fromList(it)
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterPartnerParams.fromList(it)
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterPrepUploadRequest.fromList(it)
        }
      }
      157.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterPrepUploadResponse.fromList(it)
        }
      }
      158.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterProductsConfigRequest.fromList(it)
        }
      }
      159.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterProductsConfigResponse.fromList(it)
        }
      }
      160.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterServicesResponse.fromList(it)
        }
      }
      161.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterSmartSelfieJobResult.fromList(it)
        }
      }
      162.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterSmartSelfieJobResult.fromList(it)
        }
      }
      163.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterSmartSelfieJobStatusResponse.fromList(it)
        }
      }
      164.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterSuspectUser.fromList(it)
        }
      }
      165.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterUploadImageInfo.fromList(it)
        }
      }
      166.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterUploadRequest.fromList(it)
        }
      }
      167.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterValidDocument.fromList(it)
        }
      }
      168.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FlutterValidDocumentsResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is FlutterActions -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is FlutterAntifraud -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is FlutterAuthenticationRequest -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is FlutterAuthenticationResponse -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is FlutterAvailableIdType -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is FlutterBankCode -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is FlutterBiometricKycJobResult -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is FlutterBiometricKycJobResult -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is FlutterBiometricKycJobStatusResponse -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is FlutterConsentInfo -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is FlutterCountry -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is FlutterCountryInfo -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is FlutterDocumentVerificationJobResult -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is FlutterDocumentVerificationJobResult -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is FlutterDocumentVerificationJobStatusResponse -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is FlutterEnhancedDocumentVerificationJobResult -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is FlutterEnhancedDocumentVerificationJobResult -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is FlutterEnhancedDocumentVerificationJobStatusResponse -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is FlutterEnhancedKycAsyncResponse -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is FlutterEnhancedKycRequest -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is FlutterEnhancedKycResponse -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is FlutterHostedWeb -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is FlutterIdInfo -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is FlutterIdSelection -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      is FlutterIdType -> {
        stream.write(152)
        writeValue(stream, value.toList())
      }
      is FlutterImageLinks -> {
        stream.write(153)
        writeValue(stream, value.toList())
      }
      is FlutterJobStatusRequest -> {
        stream.write(154)
        writeValue(stream, value.toList())
      }
      is FlutterPartnerParams -> {
        stream.write(155)
        writeValue(stream, value.toList())
      }
      is FlutterPrepUploadRequest -> {
        stream.write(156)
        writeValue(stream, value.toList())
      }
      is FlutterPrepUploadResponse -> {
        stream.write(157)
        writeValue(stream, value.toList())
      }
      is FlutterProductsConfigRequest -> {
        stream.write(158)
        writeValue(stream, value.toList())
      }
      is FlutterProductsConfigResponse -> {
        stream.write(159)
        writeValue(stream, value.toList())
      }
      is FlutterServicesResponse -> {
        stream.write(160)
        writeValue(stream, value.toList())
      }
      is FlutterSmartSelfieJobResult -> {
        stream.write(161)
        writeValue(stream, value.toList())
      }
      is FlutterSmartSelfieJobResult -> {
        stream.write(162)
        writeValue(stream, value.toList())
      }
      is FlutterSmartSelfieJobStatusResponse -> {
        stream.write(163)
        writeValue(stream, value.toList())
      }
      is FlutterSuspectUser -> {
        stream.write(164)
        writeValue(stream, value.toList())
      }
      is FlutterUploadImageInfo -> {
        stream.write(165)
        writeValue(stream, value.toList())
      }
      is FlutterUploadRequest -> {
        stream.write(166)
        writeValue(stream, value.toList())
      }
      is FlutterValidDocument -> {
        stream.write(167)
        writeValue(stream, value.toList())
      }
      is FlutterValidDocumentsResponse -> {
        stream.write(168)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface SmileIDApi {
  fun initialize()
  fun setEnvironment(useSandbox: Boolean)
  fun setCallbackUrl(callbackUrl: String)
  fun authenticate(request: FlutterAuthenticationRequest, callback: (Result<FlutterAuthenticationResponse>) -> Unit)
  fun prepUpload(request: FlutterPrepUploadRequest, callback: (Result<FlutterPrepUploadResponse>) -> Unit)
  fun upload(url: String, request: FlutterUploadRequest, callback: (Result<Unit>) -> Unit)
  fun doEnhancedKyc(request: FlutterEnhancedKycRequest, callback: (Result<FlutterEnhancedKycResponse>) -> Unit)
  fun doEnhancedKycAsync(request: FlutterEnhancedKycRequest, callback: (Result<FlutterEnhancedKycAsyncResponse>) -> Unit)
  fun getSmartSelfieJobStatus(request: FlutterJobStatusRequest, callback: (Result<FlutterSmartSelfieJobStatusResponse>) -> Unit)
  fun getDocumentVerificationJobStatus(request: FlutterJobStatusRequest, callback: (Result<FlutterDocumentVerificationJobStatusResponse>) -> Unit)
  fun getBiometricKycJobStatus(request: FlutterJobStatusRequest, callback: (Result<FlutterBiometricKycJobStatusResponse>) -> Unit)
  fun getEnhancedDocumentVerificationJobStatus(request: FlutterJobStatusRequest, callback: (Result<FlutterEnhancedDocumentVerificationJobStatusResponse>) -> Unit)
  fun getProductsConfig(request: FlutterProductsConfigRequest, callback: (Result<FlutterProductsConfigResponse>) -> Unit)
  fun getValidDocuments(request: FlutterProductsConfigRequest, callback: (Result<FlutterValidDocumentsResponse>) -> Unit)
  fun getServices(callback: (Result<FlutterServicesResponse>) -> Unit)

  companion object {
    /** The codec used by SmileIDApi. */
    val codec: MessageCodec<Any?> by lazy {
      SmileIDApiCodec
    }
    /** Sets up an instance of `SmileIDApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: SmileIDApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.initialize()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.setEnvironment", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val useSandboxArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.setEnvironment(useSandboxArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.setCallbackUrl", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val callbackUrlArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.setCallbackUrl(callbackUrlArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.authenticate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterAuthenticationRequest
            api.authenticate(requestArg) { result: Result<FlutterAuthenticationResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.prepUpload", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterPrepUploadRequest
            api.prepUpload(requestArg) { result: Result<FlutterPrepUploadResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.upload", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            val requestArg = args[1] as FlutterUploadRequest
            api.upload(urlArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.doEnhancedKyc", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterEnhancedKycRequest
            api.doEnhancedKyc(requestArg) { result: Result<FlutterEnhancedKycResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.doEnhancedKycAsync", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterEnhancedKycRequest
            api.doEnhancedKycAsync(requestArg) { result: Result<FlutterEnhancedKycAsyncResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.getSmartSelfieJobStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterJobStatusRequest
            api.getSmartSelfieJobStatus(requestArg) { result: Result<FlutterSmartSelfieJobStatusResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.getDocumentVerificationJobStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterJobStatusRequest
            api.getDocumentVerificationJobStatus(requestArg) { result: Result<FlutterDocumentVerificationJobStatusResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.getBiometricKycJobStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterJobStatusRequest
            api.getBiometricKycJobStatus(requestArg) { result: Result<FlutterBiometricKycJobStatusResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.getEnhancedDocumentVerificationJobStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterJobStatusRequest
            api.getEnhancedDocumentVerificationJobStatus(requestArg) { result: Result<FlutterEnhancedDocumentVerificationJobStatusResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.getProductsConfig", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterProductsConfigRequest
            api.getProductsConfig(requestArg) { result: Result<FlutterProductsConfigResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.getValidDocuments", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as FlutterProductsConfigRequest
            api.getValidDocuments(requestArg) { result: Result<FlutterValidDocumentsResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.smileid.SmileIDApi.getServices", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getServices() { result: Result<FlutterServicesResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
