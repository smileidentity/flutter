// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum FlutterJobType: Int {
  case enhancedKyc = 0
  case documentVerification = 1
}

enum FlutterImageType: Int {
  case selfieJpgFile = 0
  case idCardJpgFile = 1
  case selfieJpgBase64 = 2
  case idCardJpgBase64 = 3
  case livenessJpgFile = 4
  case idCardRearJpgFile = 5
  case livenessJpgBase64 = 6
  case idCardRearJpgBase64 = 7
}

enum FlutterActionResult: Int {
  case passed = 0
  case completed = 1
  case approved = 2
  case verified = 3
  case provisionallyApproved = 4
  case returned = 5
  case notReturned = 6
  case failed = 7
  case rejected = 8
  case underReview = 9
  case unableToDetermine = 10
  case notApplicable = 11
  case notVerified = 12
  case notDone = 13
  case issuerUnavailable = 14
  case unknown = 15
}

///  Custom values specific to partners can be placed in [extras]
///
/// Generated class from Pigeon that represents data sent in messages.
struct FlutterPartnerParams {
  var jobType: FlutterJobType? = nil
  var jobId: String
  var userId: String
  var extras: [String?: String?]? = nil

  static func fromList(_ list: [Any?]) -> FlutterPartnerParams? {
    var jobType: FlutterJobType? = nil
    let jobTypeEnumVal: Int? = nilOrValue(list[0])
    if let jobTypeRawValue = jobTypeEnumVal {
      jobType = FlutterJobType(rawValue: jobTypeRawValue)!
    }
    let jobId = list[1] as! String
    let userId = list[2] as! String
    let extras: [String?: String?]? = nilOrValue(list[3])

    return FlutterPartnerParams(
      jobType: jobType,
      jobId: jobId,
      userId: userId,
      extras: extras
    )
  }
  func toList() -> [Any?] {
    return [
      jobType?.rawValue,
      jobId,
      userId,
      extras,
    ]
  }
}

/// The Auth Smile request. Auth Smile serves multiple purposes:
///
/// - It is used to fetch the signature needed for subsequent API requests
/// - It indicates the type of job that will being performed
/// - It is used to fetch consent information for the partner
///
/// [jobType] The type of job that will be performed
/// [country] The country code of the country where the job is being performed. This value is
/// required in order to get back consent information for the partner
/// [idType] The type of ID that will be used for the job. This value is required in order to
/// get back consent information for the partner
/// [updateEnrolledImage] Whether or not the enrolled image should be updated with image
/// submitted for this job
/// [jobId] The job ID to associate with the job. Most often, this will correspond to a unique
/// Job ID within your own system. If not provided, a random job ID will be generated
/// [userId] The user ID to associate with the job. Most often, this will correspond to a unique
/// User ID within your own system. If not provided, a random user ID will be generated
///
/// Generated class from Pigeon that represents data sent in messages.
struct FlutterAuthenticationRequest {
  var jobType: FlutterJobType
  var country: String? = nil
  var idType: String? = nil
  var updateEnrolledImage: Bool? = nil
  var jobId: String? = nil
  var userId: String? = nil

  static func fromList(_ list: [Any?]) -> FlutterAuthenticationRequest? {
    let jobType = FlutterJobType(rawValue: list[0] as! Int)!
    let country: String? = nilOrValue(list[1])
    let idType: String? = nilOrValue(list[2])
    let updateEnrolledImage: Bool? = nilOrValue(list[3])
    let jobId: String? = nilOrValue(list[4])
    let userId: String? = nilOrValue(list[5])

    return FlutterAuthenticationRequest(
      jobType: jobType,
      country: country,
      idType: idType,
      updateEnrolledImage: updateEnrolledImage,
      jobId: jobId,
      userId: userId
    )
  }
  func toList() -> [Any?] {
    return [
      jobType.rawValue,
      country,
      idType,
      updateEnrolledImage,
      jobId,
      userId,
    ]
  }
}

/// [consentInfo] is only populated when a country and ID type are provided in the
/// [FlutterAuthenticationRequest]. To get information about *all* countries and ID types instead,
///  [SmileIDService.getProductsConfig]
///
/// [timestamp] is *not* a [DateTime] because technically, any arbitrary value could have been
/// passed to it. This applies to all other timestamp fields in the SDK.
///
/// Generated class from Pigeon that represents data sent in messages.
struct FlutterAuthenticationResponse {
  var success: Bool
  var signature: String
  var timestamp: String
  var partnerParams: FlutterPartnerParams
  var callbackUrl: String? = nil
  var consentInfo: FlutterConsentInfo? = nil

  static func fromList(_ list: [Any?]) -> FlutterAuthenticationResponse? {
    let success = list[0] as! Bool
    let signature = list[1] as! String
    let timestamp = list[2] as! String
    let partnerParams = FlutterPartnerParams.fromList(list[3] as! [Any?])!
    let callbackUrl: String? = nilOrValue(list[4])
    var consentInfo: FlutterConsentInfo? = nil
    if let consentInfoList: [Any?] = nilOrValue(list[5]) {
      consentInfo = FlutterConsentInfo.fromList(consentInfoList)
    }

    return FlutterAuthenticationResponse(
      success: success,
      signature: signature,
      timestamp: timestamp,
      partnerParams: partnerParams,
      callbackUrl: callbackUrl,
      consentInfo: consentInfo
    )
  }
  func toList() -> [Any?] {
    return [
      success,
      signature,
      timestamp,
      partnerParams.toList(),
      callbackUrl,
      consentInfo?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterPrepUploadRequest {
  var partnerParams: FlutterPartnerParams
  var callbackUrl: String? = nil
  var allowNewEnroll: Bool
  var partnerId: String
  var timestamp: String
  var signature: String

  static func fromList(_ list: [Any?]) -> FlutterPrepUploadRequest? {
    let partnerParams = FlutterPartnerParams.fromList(list[0] as! [Any?])!
    let callbackUrl: String? = nilOrValue(list[1])
    let allowNewEnroll = list[2] as! Bool
    let partnerId = list[3] as! String
    let timestamp = list[4] as! String
    let signature = list[5] as! String

    return FlutterPrepUploadRequest(
      partnerParams: partnerParams,
      callbackUrl: callbackUrl,
      allowNewEnroll: allowNewEnroll,
      partnerId: partnerId,
      timestamp: timestamp,
      signature: signature
    )
  }
  func toList() -> [Any?] {
    return [
      partnerParams.toList(),
      callbackUrl,
      allowNewEnroll,
      partnerId,
      timestamp,
      signature,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterPrepUploadResponse {
  var code: String
  var refId: String
  var uploadUrl: String
  var smileJobId: String

  static func fromList(_ list: [Any?]) -> FlutterPrepUploadResponse? {
    let code = list[0] as! String
    let refId = list[1] as! String
    let uploadUrl = list[2] as! String
    let smileJobId = list[3] as! String

    return FlutterPrepUploadResponse(
      code: code,
      refId: refId,
      uploadUrl: uploadUrl,
      smileJobId: smileJobId
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      refId,
      uploadUrl,
      smileJobId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterUploadRequest {
  var images: [FlutterUploadImageInfo?]
  var idInfo: FlutterIdInfo? = nil

  static func fromList(_ list: [Any?]) -> FlutterUploadRequest? {
    let images = list[0] as! [FlutterUploadImageInfo?]
    var idInfo: FlutterIdInfo? = nil
    if let idInfoList: [Any?] = nilOrValue(list[1]) {
      idInfo = FlutterIdInfo.fromList(idInfoList)
    }

    return FlutterUploadRequest(
      images: images,
      idInfo: idInfo
    )
  }
  func toList() -> [Any?] {
    return [
      images,
      idInfo?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterUploadImageInfo {
  var imageTypeId: FlutterImageType
  var imageName: String

  static func fromList(_ list: [Any?]) -> FlutterUploadImageInfo? {
    let imageTypeId = FlutterImageType(rawValue: list[0] as! Int)!
    let imageName = list[1] as! String

    return FlutterUploadImageInfo(
      imageTypeId: imageTypeId,
      imageName: imageName
    )
  }
  func toList() -> [Any?] {
    return [
      imageTypeId.rawValue,
      imageName,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterIdInfo {
  var country: String
  var idType: String? = nil
  var idNumber: String? = nil
  var firstName: String? = nil
  var middleName: String? = nil
  var lastName: String? = nil
  var dob: String? = nil
  var bankCode: String? = nil
  var entered: Bool? = nil

  static func fromList(_ list: [Any?]) -> FlutterIdInfo? {
    let country = list[0] as! String
    let idType: String? = nilOrValue(list[1])
    let idNumber: String? = nilOrValue(list[2])
    let firstName: String? = nilOrValue(list[3])
    let middleName: String? = nilOrValue(list[4])
    let lastName: String? = nilOrValue(list[5])
    let dob: String? = nilOrValue(list[6])
    let bankCode: String? = nilOrValue(list[7])
    let entered: Bool? = nilOrValue(list[8])

    return FlutterIdInfo(
      country: country,
      idType: idType,
      idNumber: idNumber,
      firstName: firstName,
      middleName: middleName,
      lastName: lastName,
      dob: dob,
      bankCode: bankCode,
      entered: entered
    )
  }
  func toList() -> [Any?] {
    return [
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      bankCode,
      entered,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterEnhancedKycResponse {
  var smileJobId: String
  var partnerParams: FlutterPartnerParams
  var resultText: String
  var resultCode: String
  var actions: FlutterActions
  var country: String
  var idType: String
  var idNumber: String
  var fullName: String? = nil
  var expirationDate: String? = nil
  var dob: String? = nil
  var base64Photo: String? = nil

  static func fromList(_ list: [Any?]) -> FlutterEnhancedKycResponse? {
    let smileJobId = list[0] as! String
    let partnerParams = FlutterPartnerParams.fromList(list[1] as! [Any?])!
    let resultText = list[2] as! String
    let resultCode = list[3] as! String
    let actions = FlutterActions.fromList(list[4] as! [Any?])!
    let country = list[5] as! String
    let idType = list[6] as! String
    let idNumber = list[7] as! String
    let fullName: String? = nilOrValue(list[8])
    let expirationDate: String? = nilOrValue(list[9])
    let dob: String? = nilOrValue(list[10])
    let base64Photo: String? = nilOrValue(list[11])

    return FlutterEnhancedKycResponse(
      smileJobId: smileJobId,
      partnerParams: partnerParams,
      resultText: resultText,
      resultCode: resultCode,
      actions: actions,
      country: country,
      idType: idType,
      idNumber: idNumber,
      fullName: fullName,
      expirationDate: expirationDate,
      dob: dob,
      base64Photo: base64Photo
    )
  }
  func toList() -> [Any?] {
    return [
      smileJobId,
      partnerParams.toList(),
      resultText,
      resultCode,
      actions.toList(),
      country,
      idType,
      idNumber,
      fullName,
      expirationDate,
      dob,
      base64Photo,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterActions {
  var documentCheck: FlutterActionResult
  var humanReviewCompare: FlutterActionResult
  var humanReviewDocumentCheck: FlutterActionResult
  var humanReviewLivenessCheck: FlutterActionResult
  var humanReviewSelfieCheck: FlutterActionResult
  var humanReviewUpdateSelfie: FlutterActionResult
  var livenessCheck: FlutterActionResult
  var registerSelfie: FlutterActionResult
  var returnPersonalInfo: FlutterActionResult
  var selfieCheck: FlutterActionResult
  var selfieProvided: FlutterActionResult
  var selfieToIdAuthorityCompare: FlutterActionResult
  var selfieToIdCardCompare: FlutterActionResult
  var selfieToRegisteredSelfieCompare: FlutterActionResult
  var updateRegisteredSelfieOnFile: FlutterActionResult
  var verifyDocument: FlutterActionResult
  var verifyIdNumber: FlutterActionResult

  static func fromList(_ list: [Any?]) -> FlutterActions? {
    let documentCheck = FlutterActionResult(rawValue: list[0] as! Int)!
    let humanReviewCompare = FlutterActionResult(rawValue: list[1] as! Int)!
    let humanReviewDocumentCheck = FlutterActionResult(rawValue: list[2] as! Int)!
    let humanReviewLivenessCheck = FlutterActionResult(rawValue: list[3] as! Int)!
    let humanReviewSelfieCheck = FlutterActionResult(rawValue: list[4] as! Int)!
    let humanReviewUpdateSelfie = FlutterActionResult(rawValue: list[5] as! Int)!
    let livenessCheck = FlutterActionResult(rawValue: list[6] as! Int)!
    let registerSelfie = FlutterActionResult(rawValue: list[7] as! Int)!
    let returnPersonalInfo = FlutterActionResult(rawValue: list[8] as! Int)!
    let selfieCheck = FlutterActionResult(rawValue: list[9] as! Int)!
    let selfieProvided = FlutterActionResult(rawValue: list[10] as! Int)!
    let selfieToIdAuthorityCompare = FlutterActionResult(rawValue: list[11] as! Int)!
    let selfieToIdCardCompare = FlutterActionResult(rawValue: list[12] as! Int)!
    let selfieToRegisteredSelfieCompare = FlutterActionResult(rawValue: list[13] as! Int)!
    let updateRegisteredSelfieOnFile = FlutterActionResult(rawValue: list[14] as! Int)!
    let verifyDocument = FlutterActionResult(rawValue: list[15] as! Int)!
    let verifyIdNumber = FlutterActionResult(rawValue: list[16] as! Int)!

    return FlutterActions(
      documentCheck: documentCheck,
      humanReviewCompare: humanReviewCompare,
      humanReviewDocumentCheck: humanReviewDocumentCheck,
      humanReviewLivenessCheck: humanReviewLivenessCheck,
      humanReviewSelfieCheck: humanReviewSelfieCheck,
      humanReviewUpdateSelfie: humanReviewUpdateSelfie,
      livenessCheck: livenessCheck,
      registerSelfie: registerSelfie,
      returnPersonalInfo: returnPersonalInfo,
      selfieCheck: selfieCheck,
      selfieProvided: selfieProvided,
      selfieToIdAuthorityCompare: selfieToIdAuthorityCompare,
      selfieToIdCardCompare: selfieToIdCardCompare,
      selfieToRegisteredSelfieCompare: selfieToRegisteredSelfieCompare,
      updateRegisteredSelfieOnFile: updateRegisteredSelfieOnFile,
      verifyDocument: verifyDocument,
      verifyIdNumber: verifyIdNumber
    )
  }
  func toList() -> [Any?] {
    return [
      documentCheck.rawValue,
      humanReviewCompare.rawValue,
      humanReviewDocumentCheck.rawValue,
      humanReviewLivenessCheck.rawValue,
      humanReviewSelfieCheck.rawValue,
      humanReviewUpdateSelfie.rawValue,
      livenessCheck.rawValue,
      registerSelfie.rawValue,
      returnPersonalInfo.rawValue,
      selfieCheck.rawValue,
      selfieProvided.rawValue,
      selfieToIdAuthorityCompare.rawValue,
      selfieToIdCardCompare.rawValue,
      selfieToRegisteredSelfieCompare.rawValue,
      updateRegisteredSelfieOnFile.rawValue,
      verifyDocument.rawValue,
      verifyIdNumber.rawValue,
    ]
  }
}

/// [canAccess] Whether or not the ID type is enabled for the partner
/// [consentRequired] Whether or not consent is required for the ID type
///
/// Generated class from Pigeon that represents data sent in messages.
struct FlutterConsentInfo {
  var canAccess: Bool
  var consentRequired: Bool

  static func fromList(_ list: [Any?]) -> FlutterConsentInfo? {
    let canAccess = list[0] as! Bool
    let consentRequired = list[1] as! Bool

    return FlutterConsentInfo(
      canAccess: canAccess,
      consentRequired: consentRequired
    )
  }
  func toList() -> [Any?] {
    return [
      canAccess,
      consentRequired,
    ]
  }
}

/// [timestamp] is *not* a [DateTime] because technically, any arbitrary value could have been
/// passed to it. This applies to all other timestamp fields in the SDK.
///
/// Generated class from Pigeon that represents data sent in messages.
struct FlutterEnhancedKycRequest {
  var country: String
  var idType: String
  var idNumber: String
  var firstName: String? = nil
  var middleName: String? = nil
  var lastName: String? = nil
  var dob: String? = nil
  var phoneNumber: String? = nil
  var bankCode: String? = nil
  var callbackUrl: String? = nil
  var partnerParams: FlutterPartnerParams
  var timestamp: String
  var signature: String

  static func fromList(_ list: [Any?]) -> FlutterEnhancedKycRequest? {
    let country = list[0] as! String
    let idType = list[1] as! String
    let idNumber = list[2] as! String
    let firstName: String? = nilOrValue(list[3])
    let middleName: String? = nilOrValue(list[4])
    let lastName: String? = nilOrValue(list[5])
    let dob: String? = nilOrValue(list[6])
    let phoneNumber: String? = nilOrValue(list[7])
    let bankCode: String? = nilOrValue(list[8])
    let callbackUrl: String? = nilOrValue(list[9])
    let partnerParams = FlutterPartnerParams.fromList(list[10] as! [Any?])!
    let timestamp = list[11] as! String
    let signature = list[12] as! String

    return FlutterEnhancedKycRequest(
      country: country,
      idType: idType,
      idNumber: idNumber,
      firstName: firstName,
      middleName: middleName,
      lastName: lastName,
      dob: dob,
      phoneNumber: phoneNumber,
      bankCode: bankCode,
      callbackUrl: callbackUrl,
      partnerParams: partnerParams,
      timestamp: timestamp,
      signature: signature
    )
  }
  func toList() -> [Any?] {
    return [
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      phoneNumber,
      bankCode,
      callbackUrl,
      partnerParams.toList(),
      timestamp,
      signature,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterEnhancedKycAsyncResponse {
  var success: Bool

  static func fromList(_ list: [Any?]) -> FlutterEnhancedKycAsyncResponse? {
    let success = list[0] as! Bool

    return FlutterEnhancedKycAsyncResponse(
      success: success
    )
  }
  func toList() -> [Any?] {
    return [
      success
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterImageLinks {
  var selfieImageUrl: String? = nil
  var error: String? = nil

  static func fromList(_ list: [Any?]) -> FlutterImageLinks? {
    let selfieImageUrl: String? = nilOrValue(list[0])
    let error: String? = nilOrValue(list[1])

    return FlutterImageLinks(
      selfieImageUrl: selfieImageUrl,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      selfieImageUrl,
      error,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterAntifraud {
  var suspectUsers: [FlutterSuspectUser?]

  static func fromList(_ list: [Any?]) -> FlutterAntifraud? {
    let suspectUsers = list[0] as! [FlutterSuspectUser?]

    return FlutterAntifraud(
      suspectUsers: suspectUsers
    )
  }
  func toList() -> [Any?] {
    return [
      suspectUsers
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterSuspectUser {
  var reason: String
  var userId: String

  static func fromList(_ list: [Any?]) -> FlutterSuspectUser? {
    let reason = list[0] as! String
    let userId = list[1] as! String

    return FlutterSuspectUser(
      reason: reason,
      userId: userId
    )
  }
  func toList() -> [Any?] {
    return [
      reason,
      userId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterJobStatusRequest {
  var userId: String
  var jobId: String
  var includeImageLinks: Bool
  var includeHistory: Bool
  var partnerId: String
  var timestamp: String
  var signature: String

  static func fromList(_ list: [Any?]) -> FlutterJobStatusRequest? {
    let userId = list[0] as! String
    let jobId = list[1] as! String
    let includeImageLinks = list[2] as! Bool
    let includeHistory = list[3] as! Bool
    let partnerId = list[4] as! String
    let timestamp = list[5] as! String
    let signature = list[6] as! String

    return FlutterJobStatusRequest(
      userId: userId,
      jobId: jobId,
      includeImageLinks: includeImageLinks,
      includeHistory: includeHistory,
      partnerId: partnerId,
      timestamp: timestamp,
      signature: signature
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      jobId,
      includeImageLinks,
      includeHistory,
      partnerId,
      timestamp,
      signature,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterSmartSelfieJobResult {
  var actions: FlutterActions
  var resultCode: String
  var resultText: String
  var smileJobId: String
  var partnerParams: FlutterPartnerParams
  var confidence: Double? = nil

  static func fromList(_ list: [Any?]) -> FlutterSmartSelfieJobResult? {
    let actions = FlutterActions.fromList(list[0] as! [Any?])!
    let resultCode = list[1] as! String
    let resultText = list[2] as! String
    let smileJobId = list[3] as! String
    let partnerParams = FlutterPartnerParams.fromList(list[4] as! [Any?])!
    let confidence: Double? = nilOrValue(list[5])

    return FlutterSmartSelfieJobResult(
      actions: actions,
      resultCode: resultCode,
      resultText: resultText,
      smileJobId: smileJobId,
      partnerParams: partnerParams,
      confidence: confidence
    )
  }
  func toList() -> [Any?] {
    return [
      actions.toList(),
      resultCode,
      resultText,
      smileJobId,
      partnerParams.toList(),
      confidence,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterSmartSelfieJobStatusResponse {
  var timestamp: String
  var jobComplete: Bool
  var jobSuccess: Bool
  var code: String
  var result: FlutterSmartSelfieJobResult? = nil
  var resultString: String? = nil
  var history: [FlutterSmartSelfieJobResult?]? = nil
  var imageLinks: FlutterImageLinks? = nil

  static func fromList(_ list: [Any?]) -> FlutterSmartSelfieJobStatusResponse? {
    let timestamp = list[0] as! String
    let jobComplete = list[1] as! Bool
    let jobSuccess = list[2] as! Bool
    let code = list[3] as! String
    var result: FlutterSmartSelfieJobResult? = nil
    if let resultList: [Any?] = nilOrValue(list[4]) {
      result = FlutterSmartSelfieJobResult.fromList(resultList)
    }
    let resultString: String? = nilOrValue(list[5])
    let history: [FlutterSmartSelfieJobResult?]? = nilOrValue(list[6])
    var imageLinks: FlutterImageLinks? = nil
    if let imageLinksList: [Any?] = nilOrValue(list[7]) {
      imageLinks = FlutterImageLinks.fromList(imageLinksList)
    }

    return FlutterSmartSelfieJobStatusResponse(
      timestamp: timestamp,
      jobComplete: jobComplete,
      jobSuccess: jobSuccess,
      code: code,
      result: result,
      resultString: resultString,
      history: history,
      imageLinks: imageLinks
    )
  }
  func toList() -> [Any?] {
    return [
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result?.toList(),
      resultString,
      history,
      imageLinks?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterDocumentVerificationJobResult {
  var actions: FlutterActions
  var resultCode: String
  var resultText: String
  var smileJobId: String
  var partnerParams: FlutterPartnerParams
  var country: String? = nil
  var idType: String? = nil
  var idNumber: String? = nil
  var fullName: String? = nil
  var dob: String? = nil
  var gender: String? = nil
  var expirationDate: String? = nil
  var documentImageBase64: String? = nil
  var phoneNumber: String? = nil
  var phoneNumber2: String? = nil
  var address: String? = nil

  static func fromList(_ list: [Any?]) -> FlutterDocumentVerificationJobResult? {
    let actions = FlutterActions.fromList(list[0] as! [Any?])!
    let resultCode = list[1] as! String
    let resultText = list[2] as! String
    let smileJobId = list[3] as! String
    let partnerParams = FlutterPartnerParams.fromList(list[4] as! [Any?])!
    let country: String? = nilOrValue(list[5])
    let idType: String? = nilOrValue(list[6])
    let idNumber: String? = nilOrValue(list[7])
    let fullName: String? = nilOrValue(list[8])
    let dob: String? = nilOrValue(list[9])
    let gender: String? = nilOrValue(list[10])
    let expirationDate: String? = nilOrValue(list[11])
    let documentImageBase64: String? = nilOrValue(list[12])
    let phoneNumber: String? = nilOrValue(list[13])
    let phoneNumber2: String? = nilOrValue(list[14])
    let address: String? = nilOrValue(list[15])

    return FlutterDocumentVerificationJobResult(
      actions: actions,
      resultCode: resultCode,
      resultText: resultText,
      smileJobId: smileJobId,
      partnerParams: partnerParams,
      country: country,
      idType: idType,
      idNumber: idNumber,
      fullName: fullName,
      dob: dob,
      gender: gender,
      expirationDate: expirationDate,
      documentImageBase64: documentImageBase64,
      phoneNumber: phoneNumber,
      phoneNumber2: phoneNumber2,
      address: address
    )
  }
  func toList() -> [Any?] {
    return [
      actions.toList(),
      resultCode,
      resultText,
      smileJobId,
      partnerParams.toList(),
      country,
      idType,
      idNumber,
      fullName,
      dob,
      gender,
      expirationDate,
      documentImageBase64,
      phoneNumber,
      phoneNumber2,
      address,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterDocumentVerificationJobStatusResponse {
  var timestamp: String
  var jobComplete: Bool
  var jobSuccess: Bool
  var code: String
  var result: FlutterDocumentVerificationJobResult? = nil
  var resultString: String? = nil
  var history: [FlutterDocumentVerificationJobResult?]? = nil
  var imageLinks: FlutterImageLinks? = nil

  static func fromList(_ list: [Any?]) -> FlutterDocumentVerificationJobStatusResponse? {
    let timestamp = list[0] as! String
    let jobComplete = list[1] as! Bool
    let jobSuccess = list[2] as! Bool
    let code = list[3] as! String
    var result: FlutterDocumentVerificationJobResult? = nil
    if let resultList: [Any?] = nilOrValue(list[4]) {
      result = FlutterDocumentVerificationJobResult.fromList(resultList)
    }
    let resultString: String? = nilOrValue(list[5])
    let history: [FlutterDocumentVerificationJobResult?]? = nilOrValue(list[6])
    var imageLinks: FlutterImageLinks? = nil
    if let imageLinksList: [Any?] = nilOrValue(list[7]) {
      imageLinks = FlutterImageLinks.fromList(imageLinksList)
    }

    return FlutterDocumentVerificationJobStatusResponse(
      timestamp: timestamp,
      jobComplete: jobComplete,
      jobSuccess: jobSuccess,
      code: code,
      result: result,
      resultString: resultString,
      history: history,
      imageLinks: imageLinks
    )
  }
  func toList() -> [Any?] {
    return [
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result?.toList(),
      resultString,
      history,
      imageLinks?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterBiometricKycJobResult {
  var actions: FlutterActions
  var resultCode: String
  var resultText: String
  var resultType: String
  var smileJobId: String
  var partnerParams: FlutterPartnerParams
  var antifraud: FlutterAntifraud? = nil
  var dob: String? = nil
  var photoBase64: String? = nil
  var gender: String? = nil
  var idType: String? = nil
  var address: String? = nil
  var country: String? = nil
  var documentImageBase64: String? = nil
  var fullData: [String?: String?]? = nil
  var fullName: String? = nil
  var idNumber: String? = nil
  var phoneNumber: String? = nil
  var phoneNumber2: String? = nil
  var expirationDate: String? = nil
  var secondaryIdNumber: String? = nil
  var idNumberPreviouslyRegistered: Bool? = nil
  var previousRegistrantsUserIds: [String?]? = nil

  static func fromList(_ list: [Any?]) -> FlutterBiometricKycJobResult? {
    let actions = FlutterActions.fromList(list[0] as! [Any?])!
    let resultCode = list[1] as! String
    let resultText = list[2] as! String
    let resultType = list[3] as! String
    let smileJobId = list[4] as! String
    let partnerParams = FlutterPartnerParams.fromList(list[5] as! [Any?])!
    var antifraud: FlutterAntifraud? = nil
    if let antifraudList: [Any?] = nilOrValue(list[6]) {
      antifraud = FlutterAntifraud.fromList(antifraudList)
    }
    let dob: String? = nilOrValue(list[7])
    let photoBase64: String? = nilOrValue(list[8])
    let gender: String? = nilOrValue(list[9])
    let idType: String? = nilOrValue(list[10])
    let address: String? = nilOrValue(list[11])
    let country: String? = nilOrValue(list[12])
    let documentImageBase64: String? = nilOrValue(list[13])
    let fullData: [String?: String?]? = nilOrValue(list[14])
    let fullName: String? = nilOrValue(list[15])
    let idNumber: String? = nilOrValue(list[16])
    let phoneNumber: String? = nilOrValue(list[17])
    let phoneNumber2: String? = nilOrValue(list[18])
    let expirationDate: String? = nilOrValue(list[19])
    let secondaryIdNumber: String? = nilOrValue(list[20])
    let idNumberPreviouslyRegistered: Bool? = nilOrValue(list[21])
    let previousRegistrantsUserIds: [String?]? = nilOrValue(list[22])

    return FlutterBiometricKycJobResult(
      actions: actions,
      resultCode: resultCode,
      resultText: resultText,
      resultType: resultType,
      smileJobId: smileJobId,
      partnerParams: partnerParams,
      antifraud: antifraud,
      dob: dob,
      photoBase64: photoBase64,
      gender: gender,
      idType: idType,
      address: address,
      country: country,
      documentImageBase64: documentImageBase64,
      fullData: fullData,
      fullName: fullName,
      idNumber: idNumber,
      phoneNumber: phoneNumber,
      phoneNumber2: phoneNumber2,
      expirationDate: expirationDate,
      secondaryIdNumber: secondaryIdNumber,
      idNumberPreviouslyRegistered: idNumberPreviouslyRegistered,
      previousRegistrantsUserIds: previousRegistrantsUserIds
    )
  }
  func toList() -> [Any?] {
    return [
      actions.toList(),
      resultCode,
      resultText,
      resultType,
      smileJobId,
      partnerParams.toList(),
      antifraud?.toList(),
      dob,
      photoBase64,
      gender,
      idType,
      address,
      country,
      documentImageBase64,
      fullData,
      fullName,
      idNumber,
      phoneNumber,
      phoneNumber2,
      expirationDate,
      secondaryIdNumber,
      idNumberPreviouslyRegistered,
      previousRegistrantsUserIds,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterBiometricKycJobStatusResponse {
  var timestamp: String
  var jobComplete: Bool
  var jobSuccess: Bool
  var code: String
  var result: FlutterBiometricKycJobResult? = nil
  var resultString: String? = nil
  var history: [FlutterBiometricKycJobResult?]? = nil
  var imageLinks: FlutterImageLinks? = nil

  static func fromList(_ list: [Any?]) -> FlutterBiometricKycJobStatusResponse? {
    let timestamp = list[0] as! String
    let jobComplete = list[1] as! Bool
    let jobSuccess = list[2] as! Bool
    let code = list[3] as! String
    var result: FlutterBiometricKycJobResult? = nil
    if let resultList: [Any?] = nilOrValue(list[4]) {
      result = FlutterBiometricKycJobResult.fromList(resultList)
    }
    let resultString: String? = nilOrValue(list[5])
    let history: [FlutterBiometricKycJobResult?]? = nilOrValue(list[6])
    var imageLinks: FlutterImageLinks? = nil
    if let imageLinksList: [Any?] = nilOrValue(list[7]) {
      imageLinks = FlutterImageLinks.fromList(imageLinksList)
    }

    return FlutterBiometricKycJobStatusResponse(
      timestamp: timestamp,
      jobComplete: jobComplete,
      jobSuccess: jobSuccess,
      code: code,
      result: result,
      resultString: resultString,
      history: history,
      imageLinks: imageLinks
    )
  }
  func toList() -> [Any?] {
    return [
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result?.toList(),
      resultString,
      history,
      imageLinks?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterEnhancedDocumentVerificationJobResult {
  var actions: FlutterActions
  var resultCode: String
  var resultText: String
  var resultType: String
  var smileJobId: String
  var partnerParams: FlutterPartnerParams
  var antifraud: FlutterAntifraud? = nil
  var dob: String? = nil
  var photoBase64: String? = nil
  var gender: String? = nil
  var idType: String? = nil
  var address: String? = nil
  var country: String? = nil
  var documentImageBase64: String? = nil
  var fullData: [String?: String?]? = nil
  var fullName: String? = nil
  var idNumber: String? = nil
  var phoneNumber: String? = nil
  var phoneNumber2: String? = nil
  var expirationDate: String? = nil
  var secondaryIdNumber: String? = nil
  var idNumberPreviouslyRegistered: Bool? = nil
  var previousRegistrantsUserIds: [String?]? = nil

  static func fromList(_ list: [Any?]) -> FlutterEnhancedDocumentVerificationJobResult? {
    let actions = FlutterActions.fromList(list[0] as! [Any?])!
    let resultCode = list[1] as! String
    let resultText = list[2] as! String
    let resultType = list[3] as! String
    let smileJobId = list[4] as! String
    let partnerParams = FlutterPartnerParams.fromList(list[5] as! [Any?])!
    var antifraud: FlutterAntifraud? = nil
    if let antifraudList: [Any?] = nilOrValue(list[6]) {
      antifraud = FlutterAntifraud.fromList(antifraudList)
    }
    let dob: String? = nilOrValue(list[7])
    let photoBase64: String? = nilOrValue(list[8])
    let gender: String? = nilOrValue(list[9])
    let idType: String? = nilOrValue(list[10])
    let address: String? = nilOrValue(list[11])
    let country: String? = nilOrValue(list[12])
    let documentImageBase64: String? = nilOrValue(list[13])
    let fullData: [String?: String?]? = nilOrValue(list[14])
    let fullName: String? = nilOrValue(list[15])
    let idNumber: String? = nilOrValue(list[16])
    let phoneNumber: String? = nilOrValue(list[17])
    let phoneNumber2: String? = nilOrValue(list[18])
    let expirationDate: String? = nilOrValue(list[19])
    let secondaryIdNumber: String? = nilOrValue(list[20])
    let idNumberPreviouslyRegistered: Bool? = nilOrValue(list[21])
    let previousRegistrantsUserIds: [String?]? = nilOrValue(list[22])

    return FlutterEnhancedDocumentVerificationJobResult(
      actions: actions,
      resultCode: resultCode,
      resultText: resultText,
      resultType: resultType,
      smileJobId: smileJobId,
      partnerParams: partnerParams,
      antifraud: antifraud,
      dob: dob,
      photoBase64: photoBase64,
      gender: gender,
      idType: idType,
      address: address,
      country: country,
      documentImageBase64: documentImageBase64,
      fullData: fullData,
      fullName: fullName,
      idNumber: idNumber,
      phoneNumber: phoneNumber,
      phoneNumber2: phoneNumber2,
      expirationDate: expirationDate,
      secondaryIdNumber: secondaryIdNumber,
      idNumberPreviouslyRegistered: idNumberPreviouslyRegistered,
      previousRegistrantsUserIds: previousRegistrantsUserIds
    )
  }
  func toList() -> [Any?] {
    return [
      actions.toList(),
      resultCode,
      resultText,
      resultType,
      smileJobId,
      partnerParams.toList(),
      antifraud?.toList(),
      dob,
      photoBase64,
      gender,
      idType,
      address,
      country,
      documentImageBase64,
      fullData,
      fullName,
      idNumber,
      phoneNumber,
      phoneNumber2,
      expirationDate,
      secondaryIdNumber,
      idNumberPreviouslyRegistered,
      previousRegistrantsUserIds,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterEnhancedDocumentVerificationJobStatusResponse {
  var timestamp: String
  var jobComplete: Bool
  var jobSuccess: Bool
  var code: String
  var result: FlutterEnhancedDocumentVerificationJobResult? = nil
  var resultString: String? = nil
  var history: [FlutterEnhancedDocumentVerificationJobResult?]? = nil
  var imageLinks: FlutterImageLinks? = nil

  static func fromList(_ list: [Any?]) -> FlutterEnhancedDocumentVerificationJobStatusResponse? {
    let timestamp = list[0] as! String
    let jobComplete = list[1] as! Bool
    let jobSuccess = list[2] as! Bool
    let code = list[3] as! String
    var result: FlutterEnhancedDocumentVerificationJobResult? = nil
    if let resultList: [Any?] = nilOrValue(list[4]) {
      result = FlutterEnhancedDocumentVerificationJobResult.fromList(resultList)
    }
    let resultString: String? = nilOrValue(list[5])
    let history: [FlutterEnhancedDocumentVerificationJobResult?]? = nilOrValue(list[6])
    var imageLinks: FlutterImageLinks? = nil
    if let imageLinksList: [Any?] = nilOrValue(list[7]) {
      imageLinks = FlutterImageLinks.fromList(imageLinksList)
    }

    return FlutterEnhancedDocumentVerificationJobStatusResponse(
      timestamp: timestamp,
      jobComplete: jobComplete,
      jobSuccess: jobSuccess,
      code: code,
      result: result,
      resultString: resultString,
      history: history,
      imageLinks: imageLinks
    )
  }
  func toList() -> [Any?] {
    return [
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result?.toList(),
      resultString,
      history,
      imageLinks?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterProductsConfigRequest {
  var partnerId: String
  var timestamp: String
  var signature: String

  static func fromList(_ list: [Any?]) -> FlutterProductsConfigRequest? {
    let partnerId = list[0] as! String
    let timestamp = list[1] as! String
    let signature = list[2] as! String

    return FlutterProductsConfigRequest(
      partnerId: partnerId,
      timestamp: timestamp,
      signature: signature
    )
  }
  func toList() -> [Any?] {
    return [
      partnerId,
      timestamp,
      signature,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterProductsConfigResponse {
  var consentRequired: [String?: [String?]?]
  var idSelection: FlutterIdSelection

  static func fromList(_ list: [Any?]) -> FlutterProductsConfigResponse? {
    let consentRequired = list[0] as! [String?: [String?]?]
    let idSelection = FlutterIdSelection.fromList(list[1] as! [Any?])!

    return FlutterProductsConfigResponse(
      consentRequired: consentRequired,
      idSelection: idSelection
    )
  }
  func toList() -> [Any?] {
    return [
      consentRequired,
      idSelection.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterIdSelection {
  var basicKyc: [String?: [String?]?]
  var biometricKyc: [String?: [String?]?]
  var enhancedKyc: [String?: [String?]?]
  var documentVerification: [String?: [String?]?]

  static func fromList(_ list: [Any?]) -> FlutterIdSelection? {
    let basicKyc = list[0] as! [String?: [String?]?]
    let biometricKyc = list[1] as! [String?: [String?]?]
    let enhancedKyc = list[2] as! [String?: [String?]?]
    let documentVerification = list[3] as! [String?: [String?]?]

    return FlutterIdSelection(
      basicKyc: basicKyc,
      biometricKyc: biometricKyc,
      enhancedKyc: enhancedKyc,
      documentVerification: documentVerification
    )
  }
  func toList() -> [Any?] {
    return [
      basicKyc,
      biometricKyc,
      enhancedKyc,
      documentVerification,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterValidDocumentsResponse {
  var validDocuments: [FlutterValidDocument?]

  static func fromList(_ list: [Any?]) -> FlutterValidDocumentsResponse? {
    let validDocuments = list[0] as! [FlutterValidDocument?]

    return FlutterValidDocumentsResponse(
      validDocuments: validDocuments
    )
  }
  func toList() -> [Any?] {
    return [
      validDocuments
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterValidDocument {
  var country: FlutterCountry
  var idTypes: [FlutterIdType?]

  static func fromList(_ list: [Any?]) -> FlutterValidDocument? {
    let country = FlutterCountry.fromList(list[0] as! [Any?])!
    let idTypes = list[1] as! [FlutterIdType?]

    return FlutterValidDocument(
      country: country,
      idTypes: idTypes
    )
  }
  func toList() -> [Any?] {
    return [
      country.toList(),
      idTypes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterCountry {
  var code: String
  var continent: String
  var name: String

  static func fromList(_ list: [Any?]) -> FlutterCountry? {
    let code = list[0] as! String
    let continent = list[1] as! String
    let name = list[2] as! String

    return FlutterCountry(
      code: code,
      continent: continent,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      continent,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterIdType {
  var code: String
  var example: [String?]
  var hasBack: Bool
  var name: String

  static func fromList(_ list: [Any?]) -> FlutterIdType? {
    let code = list[0] as! String
    let example = list[1] as! [String?]
    let hasBack = list[2] as! Bool
    let name = list[3] as! String

    return FlutterIdType(
      code: code,
      example: example,
      hasBack: hasBack,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      example,
      hasBack,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterServicesResponse {
  var bankCodes: [FlutterBankCode?]
  var hostedWeb: FlutterHostedWeb

  static func fromList(_ list: [Any?]) -> FlutterServicesResponse? {
    let bankCodes = list[0] as! [FlutterBankCode?]
    let hostedWeb = FlutterHostedWeb.fromList(list[1] as! [Any?])!

    return FlutterServicesResponse(
      bankCodes: bankCodes,
      hostedWeb: hostedWeb
    )
  }
  func toList() -> [Any?] {
    return [
      bankCodes,
      hostedWeb.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterBankCode {
  var name: String
  var code: String

  static func fromList(_ list: [Any?]) -> FlutterBankCode? {
    let name = list[0] as! String
    let code = list[1] as! String

    return FlutterBankCode(
      name: name,
      code: code
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      code,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterHostedWeb {
  var basicKyc: [String?: FlutterCountryInfo?]
  var biometricKyc: [String?: FlutterCountryInfo?]
  var enhancedKyc: [String?: FlutterCountryInfo?]
  var documentVerification: [String?: FlutterCountryInfo?]
  var enhancedKycSmartSelfie: [String?: FlutterCountryInfo?]
  var enhancedDocumentVerification: [String?: FlutterCountryInfo?]

  static func fromList(_ list: [Any?]) -> FlutterHostedWeb? {
    let basicKyc = list[0] as! [String?: FlutterCountryInfo?]
    let biometricKyc = list[1] as! [String?: FlutterCountryInfo?]
    let enhancedKyc = list[2] as! [String?: FlutterCountryInfo?]
    let documentVerification = list[3] as! [String?: FlutterCountryInfo?]
    let enhancedKycSmartSelfie = list[4] as! [String?: FlutterCountryInfo?]
    let enhancedDocumentVerification = list[5] as! [String?: FlutterCountryInfo?]

    return FlutterHostedWeb(
      basicKyc: basicKyc,
      biometricKyc: biometricKyc,
      enhancedKyc: enhancedKyc,
      documentVerification: documentVerification,
      enhancedKycSmartSelfie: enhancedKycSmartSelfie,
      enhancedDocumentVerification: enhancedDocumentVerification
    )
  }
  func toList() -> [Any?] {
    return [
      basicKyc,
      biometricKyc,
      enhancedKyc,
      documentVerification,
      enhancedKycSmartSelfie,
      enhancedDocumentVerification,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterCountryInfo {
  var countryCode: String
  var name: String
  var availableIdTypes: [FlutterAvailableIdType?]

  static func fromList(_ list: [Any?]) -> FlutterCountryInfo? {
    let countryCode = list[0] as! String
    let name = list[1] as! String
    let availableIdTypes = list[2] as! [FlutterAvailableIdType?]

    return FlutterCountryInfo(
      countryCode: countryCode,
      name: name,
      availableIdTypes: availableIdTypes
    )
  }
  func toList() -> [Any?] {
    return [
      countryCode,
      name,
      availableIdTypes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlutterAvailableIdType {
  var idTypeKey: String
  var label: String
  var requiredFields: [String?]
  var testData: String? = nil
  var idNumberRegex: String? = nil

  static func fromList(_ list: [Any?]) -> FlutterAvailableIdType? {
    let idTypeKey = list[0] as! String
    let label = list[1] as! String
    let requiredFields = list[2] as! [String?]
    let testData: String? = nilOrValue(list[3])
    let idNumberRegex: String? = nilOrValue(list[4])

    return FlutterAvailableIdType(
      idTypeKey: idTypeKey,
      label: label,
      requiredFields: requiredFields,
      testData: testData,
      idNumberRegex: idNumberRegex
    )
  }
  func toList() -> [Any?] {
    return [
      idTypeKey,
      label,
      requiredFields,
      testData,
      idNumberRegex,
    ]
  }
}

private class SmileIDApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return FlutterActions.fromList(self.readValue() as! [Any?])
    case 129:
      return FlutterAntifraud.fromList(self.readValue() as! [Any?])
    case 130:
      return FlutterAuthenticationRequest.fromList(self.readValue() as! [Any?])
    case 131:
      return FlutterAuthenticationResponse.fromList(self.readValue() as! [Any?])
    case 132:
      return FlutterAvailableIdType.fromList(self.readValue() as! [Any?])
    case 133:
      return FlutterBankCode.fromList(self.readValue() as! [Any?])
    case 134:
      return FlutterBiometricKycJobResult.fromList(self.readValue() as! [Any?])
    case 135:
      return FlutterBiometricKycJobResult.fromList(self.readValue() as! [Any?])
    case 136:
      return FlutterBiometricKycJobStatusResponse.fromList(self.readValue() as! [Any?])
    case 137:
      return FlutterConsentInfo.fromList(self.readValue() as! [Any?])
    case 138:
      return FlutterCountry.fromList(self.readValue() as! [Any?])
    case 139:
      return FlutterCountryInfo.fromList(self.readValue() as! [Any?])
    case 140:
      return FlutterDocumentVerificationJobResult.fromList(self.readValue() as! [Any?])
    case 141:
      return FlutterDocumentVerificationJobResult.fromList(self.readValue() as! [Any?])
    case 142:
      return FlutterDocumentVerificationJobStatusResponse.fromList(self.readValue() as! [Any?])
    case 143:
      return FlutterEnhancedDocumentVerificationJobResult.fromList(self.readValue() as! [Any?])
    case 144:
      return FlutterEnhancedDocumentVerificationJobResult.fromList(self.readValue() as! [Any?])
    case 145:
      return FlutterEnhancedDocumentVerificationJobStatusResponse.fromList(self.readValue() as! [Any?])
    case 146:
      return FlutterEnhancedKycAsyncResponse.fromList(self.readValue() as! [Any?])
    case 147:
      return FlutterEnhancedKycRequest.fromList(self.readValue() as! [Any?])
    case 148:
      return FlutterEnhancedKycResponse.fromList(self.readValue() as! [Any?])
    case 149:
      return FlutterHostedWeb.fromList(self.readValue() as! [Any?])
    case 150:
      return FlutterIdInfo.fromList(self.readValue() as! [Any?])
    case 151:
      return FlutterIdSelection.fromList(self.readValue() as! [Any?])
    case 152:
      return FlutterIdType.fromList(self.readValue() as! [Any?])
    case 153:
      return FlutterImageLinks.fromList(self.readValue() as! [Any?])
    case 154:
      return FlutterJobStatusRequest.fromList(self.readValue() as! [Any?])
    case 155:
      return FlutterPartnerParams.fromList(self.readValue() as! [Any?])
    case 156:
      return FlutterPrepUploadRequest.fromList(self.readValue() as! [Any?])
    case 157:
      return FlutterPrepUploadResponse.fromList(self.readValue() as! [Any?])
    case 158:
      return FlutterProductsConfigRequest.fromList(self.readValue() as! [Any?])
    case 159:
      return FlutterProductsConfigResponse.fromList(self.readValue() as! [Any?])
    case 160:
      return FlutterServicesResponse.fromList(self.readValue() as! [Any?])
    case 161:
      return FlutterSmartSelfieJobResult.fromList(self.readValue() as! [Any?])
    case 162:
      return FlutterSmartSelfieJobResult.fromList(self.readValue() as! [Any?])
    case 163:
      return FlutterSmartSelfieJobStatusResponse.fromList(self.readValue() as! [Any?])
    case 164:
      return FlutterSuspectUser.fromList(self.readValue() as! [Any?])
    case 165:
      return FlutterUploadImageInfo.fromList(self.readValue() as! [Any?])
    case 166:
      return FlutterUploadRequest.fromList(self.readValue() as! [Any?])
    case 167:
      return FlutterValidDocument.fromList(self.readValue() as! [Any?])
    case 168:
      return FlutterValidDocumentsResponse.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class SmileIDApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? FlutterActions {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterAntifraud {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterAuthenticationRequest {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterAuthenticationResponse {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterAvailableIdType {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterBankCode {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterBiometricKycJobResult {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterBiometricKycJobResult {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterBiometricKycJobStatusResponse {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterConsentInfo {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterCountry {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterCountryInfo {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterDocumentVerificationJobResult {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterDocumentVerificationJobResult {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterDocumentVerificationJobStatusResponse {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterEnhancedDocumentVerificationJobResult {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterEnhancedDocumentVerificationJobResult {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterEnhancedDocumentVerificationJobStatusResponse {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterEnhancedKycAsyncResponse {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterEnhancedKycRequest {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterEnhancedKycResponse {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterHostedWeb {
      super.writeByte(149)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterIdInfo {
      super.writeByte(150)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterIdSelection {
      super.writeByte(151)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterIdType {
      super.writeByte(152)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterImageLinks {
      super.writeByte(153)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterJobStatusRequest {
      super.writeByte(154)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterPartnerParams {
      super.writeByte(155)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterPrepUploadRequest {
      super.writeByte(156)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterPrepUploadResponse {
      super.writeByte(157)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterProductsConfigRequest {
      super.writeByte(158)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterProductsConfigResponse {
      super.writeByte(159)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterServicesResponse {
      super.writeByte(160)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterSmartSelfieJobResult {
      super.writeByte(161)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterSmartSelfieJobResult {
      super.writeByte(162)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterSmartSelfieJobStatusResponse {
      super.writeByte(163)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterSuspectUser {
      super.writeByte(164)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterUploadImageInfo {
      super.writeByte(165)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterUploadRequest {
      super.writeByte(166)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterValidDocument {
      super.writeByte(167)
      super.writeValue(value.toList())
    } else if let value = value as? FlutterValidDocumentsResponse {
      super.writeByte(168)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SmileIDApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SmileIDApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SmileIDApiCodecWriter(data: data)
  }
}

class SmileIDApiCodec: FlutterStandardMessageCodec {
  static let shared = SmileIDApiCodec(readerWriter: SmileIDApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SmileIDApi {
  func initialize() throws
  func setEnvironment(useSandbox: Bool) throws
  func setCallbackUrl(callbackUrl: String) throws
  func authenticate(request: FlutterAuthenticationRequest, completion: @escaping (Result<FlutterAuthenticationResponse, Error>) -> Void)
  func prepUpload(request: FlutterPrepUploadRequest, completion: @escaping (Result<FlutterPrepUploadResponse, Error>) -> Void)
  func upload(url: String, request: FlutterUploadRequest, completion: @escaping (Result<Void, Error>) -> Void)
  func doEnhancedKyc(request: FlutterEnhancedKycRequest, completion: @escaping (Result<FlutterEnhancedKycResponse, Error>) -> Void)
  func doEnhancedKycAsync(request: FlutterEnhancedKycRequest, completion: @escaping (Result<FlutterEnhancedKycAsyncResponse, Error>) -> Void)
  func getSmartSelfieJobStatus(request: FlutterJobStatusRequest, completion: @escaping (Result<FlutterSmartSelfieJobStatusResponse, Error>) -> Void)
  func getDocumentVerificationJobStatus(request: FlutterJobStatusRequest, completion: @escaping (Result<FlutterDocumentVerificationJobStatusResponse, Error>) -> Void)
  func getBiometricKycJobStatus(request: FlutterJobStatusRequest, completion: @escaping (Result<FlutterBiometricKycJobStatusResponse, Error>) -> Void)
  func getEnhancedDocumentVerificationJobStatus(request: FlutterJobStatusRequest, completion: @escaping (Result<FlutterEnhancedDocumentVerificationJobStatusResponse, Error>) -> Void)
  func getProductsConfig(request: FlutterProductsConfigRequest, completion: @escaping (Result<FlutterProductsConfigResponse, Error>) -> Void)
  func getValidDocuments(request: FlutterProductsConfigRequest, completion: @escaping (Result<FlutterValidDocumentsResponse, Error>) -> Void)
  func getServices(completion: @escaping (Result<FlutterServicesResponse, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SmileIDApiSetup {
  /// The codec used by SmileIDApi.
  static var codec: FlutterStandardMessageCodec { SmileIDApiCodec.shared }
  /// Sets up an instance of `SmileIDApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SmileIDApi?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { _, reply in
        do {
          try api.initialize()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let setEnvironmentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.setEnvironment", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setEnvironmentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let useSandboxArg = args[0] as! Bool
        do {
          try api.setEnvironment(useSandbox: useSandboxArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setEnvironmentChannel.setMessageHandler(nil)
    }
    let setCallbackUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.setCallbackUrl", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCallbackUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let callbackUrlArg = args[0] as! String
        do {
          try api.setCallbackUrl(callbackUrl: callbackUrlArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCallbackUrlChannel.setMessageHandler(nil)
    }
    let authenticateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.authenticate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterAuthenticationRequest
        api.authenticate(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateChannel.setMessageHandler(nil)
    }
    let prepUploadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.prepUpload", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      prepUploadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterPrepUploadRequest
        api.prepUpload(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      prepUploadChannel.setMessageHandler(nil)
    }
    let uploadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.upload", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      uploadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        let requestArg = args[1] as! FlutterUploadRequest
        api.upload(url: urlArg, request: requestArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      uploadChannel.setMessageHandler(nil)
    }
    let doEnhancedKycChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.doEnhancedKyc", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doEnhancedKycChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterEnhancedKycRequest
        api.doEnhancedKyc(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      doEnhancedKycChannel.setMessageHandler(nil)
    }
    let doEnhancedKycAsyncChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.doEnhancedKycAsync", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doEnhancedKycAsyncChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterEnhancedKycRequest
        api.doEnhancedKycAsync(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      doEnhancedKycAsyncChannel.setMessageHandler(nil)
    }
    let getSmartSelfieJobStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.getSmartSelfieJobStatus", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSmartSelfieJobStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterJobStatusRequest
        api.getSmartSelfieJobStatus(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getSmartSelfieJobStatusChannel.setMessageHandler(nil)
    }
    let getDocumentVerificationJobStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.getDocumentVerificationJobStatus", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDocumentVerificationJobStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterJobStatusRequest
        api.getDocumentVerificationJobStatus(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getDocumentVerificationJobStatusChannel.setMessageHandler(nil)
    }
    let getBiometricKycJobStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.getBiometricKycJobStatus", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getBiometricKycJobStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterJobStatusRequest
        api.getBiometricKycJobStatus(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getBiometricKycJobStatusChannel.setMessageHandler(nil)
    }
    let getEnhancedDocumentVerificationJobStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.getEnhancedDocumentVerificationJobStatus", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getEnhancedDocumentVerificationJobStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterJobStatusRequest
        api.getEnhancedDocumentVerificationJobStatus(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getEnhancedDocumentVerificationJobStatusChannel.setMessageHandler(nil)
    }
    let getProductsConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.getProductsConfig", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getProductsConfigChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterProductsConfigRequest
        api.getProductsConfig(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getProductsConfigChannel.setMessageHandler(nil)
    }
    let getValidDocumentsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.getValidDocuments", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getValidDocumentsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! FlutterProductsConfigRequest
        api.getValidDocuments(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getValidDocumentsChannel.setMessageHandler(nil)
    }
    let getServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.smileid.SmileIDApi.getServices", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getServicesChannel.setMessageHandler { _, reply in
        api.getServices { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getServicesChannel.setMessageHandler(nil)
    }
  }
}
