// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
            .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every((MapEntry<Object?, Object?> entry) =>
            (b as Map<Object?, Object?>).containsKey(entry.key) &&
            _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}

enum FlutterJobType {
  enhancedKyc,
  documentVerification,
  biometricKyc,
  enhancedDocumentVerification,
  smartSelfieEnrollment,
  smartSelfieAuthentication,
}

enum FlutterJobTypeV2 {
  smartSelfieAuthentication,
  smartSelfieEnrollment,
}

enum FlutterImageType {
  selfieJpgFile,
  idCardJpgFile,
  selfieJpgBase64,
  idCardJpgBase64,
  livenessJpgFile,
  idCardRearJpgFile,
  livenessJpgBase64,
  idCardRearJpgBase64,
}

enum FlutterActionResult {
  passed,
  completed,
  approved,
  verified,
  provisionallyApproved,
  returned,
  notReturned,
  failed,
  rejected,
  underReview,
  unableToDetermine,
  notApplicable,
  notVerified,
  notDone,
  issuerUnavailable,
  idAuthorityPhotoNotAvailable,
  sentToHumanReview,
  unknown,
}

enum FlutterSmartSelfieStatus {
  approved,
  pending,
  rejected,
  unknown,
}

class FlutterConsentInformation {
  FlutterConsentInformation({
    required this.consentGrantedDate,
    required this.personalDetailsConsentGranted,
    required this.contactInfoConsentGranted,
    required this.documentInfoConsentGranted,
  });

  String consentGrantedDate;

  bool personalDetailsConsentGranted;

  bool contactInfoConsentGranted;

  bool documentInfoConsentGranted;

  List<Object?> _toList() {
    return <Object?>[
      consentGrantedDate,
      personalDetailsConsentGranted,
      contactInfoConsentGranted,
      documentInfoConsentGranted,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterConsentInformation decode(Object result) {
    result as List<Object?>;
    return FlutterConsentInformation(
      consentGrantedDate: result[0]! as String,
      personalDetailsConsentGranted: result[1]! as bool,
      contactInfoConsentGranted: result[2]! as bool,
      documentInfoConsentGranted: result[3]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterConsentInformation ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

///  Custom values specific to partners can be placed in [extras]
class FlutterPartnerParams {
  FlutterPartnerParams({
    this.jobType,
    required this.jobId,
    required this.userId,
    this.extras,
  });

  FlutterJobType? jobType;

  String jobId;

  String userId;

  Map<String?, String?>? extras;

  List<Object?> _toList() {
    return <Object?>[
      jobType,
      jobId,
      userId,
      extras,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterPartnerParams decode(Object result) {
    result as List<Object?>;
    return FlutterPartnerParams(
      jobType: result[0] as FlutterJobType?,
      jobId: result[1]! as String,
      userId: result[2]! as String,
      extras: (result[3] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterPartnerParams || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// The Auth Smile request. Auth Smile serves multiple purposes:
///
/// - It is used to fetch the signature needed for subsequent API requests
/// - It indicates the type of job that will being performed
/// - It is used to fetch consent information for the partner
///
/// [jobType] The type of job that will be performed
/// [country] The country code of the country where the job is being performed. This value is
/// required in order to get back consent information for the partner
/// [idType] The type of ID that will be used for the job. This value is required in order to
/// get back consent information for the partner
/// [updateEnrolledImage] Whether or not the enrolled image should be updated with image
/// submitted for this job
/// [jobId] The job ID to associate with the job. Most often, this will correspond to a unique
/// Job ID within your own system. If not provided, a random job ID will be generated
/// [userId] The user ID to associate with the job. Most often, this will correspond to a unique
/// User ID within your own system. If not provided, a random user ID will be generated
class FlutterAuthenticationRequest {
  FlutterAuthenticationRequest({
    required this.jobType,
    this.country,
    this.idType,
    this.updateEnrolledImage,
    this.jobId,
    this.userId,
  });

  FlutterJobType jobType;

  String? country;

  String? idType;

  bool? updateEnrolledImage;

  String? jobId;

  String? userId;

  List<Object?> _toList() {
    return <Object?>[
      jobType,
      country,
      idType,
      updateEnrolledImage,
      jobId,
      userId,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterAuthenticationRequest decode(Object result) {
    result as List<Object?>;
    return FlutterAuthenticationRequest(
      jobType: result[0]! as FlutterJobType,
      country: result[1] as String?,
      idType: result[2] as String?,
      updateEnrolledImage: result[3] as bool?,
      jobId: result[4] as String?,
      userId: result[5] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterAuthenticationRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// [consentInfo] is only populated when a country and ID type are provided in the
/// [FlutterAuthenticationRequest]. To get information about *all* countries and ID types instead,
///  [SmileIDService.getProductsConfig]
///
/// [timestamp] is *not* a [DateTime] because technically, any arbitrary value could have been
/// passed to it. This applies to all other timestamp fields in the SDK.
class FlutterAuthenticationResponse {
  FlutterAuthenticationResponse({
    required this.success,
    required this.signature,
    required this.timestamp,
    required this.partnerParams,
    this.callbackUrl,
    this.consentInfo,
  });

  bool success;

  String signature;

  String timestamp;

  FlutterPartnerParams partnerParams;

  String? callbackUrl;

  FlutterConsentInfo? consentInfo;

  List<Object?> _toList() {
    return <Object?>[
      success,
      signature,
      timestamp,
      partnerParams,
      callbackUrl,
      consentInfo,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterAuthenticationResponse decode(Object result) {
    result as List<Object?>;
    return FlutterAuthenticationResponse(
      success: result[0]! as bool,
      signature: result[1]! as String,
      timestamp: result[2]! as String,
      partnerParams: result[3]! as FlutterPartnerParams,
      callbackUrl: result[4] as String?,
      consentInfo: result[5] as FlutterConsentInfo?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterAuthenticationResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterPrepUploadRequest {
  FlutterPrepUploadRequest({
    required this.partnerParams,
    this.callbackUrl,
    required this.allowNewEnroll,
    required this.partnerId,
    required this.timestamp,
    required this.signature,
  });

  FlutterPartnerParams partnerParams;

  String? callbackUrl;

  bool allowNewEnroll;

  String partnerId;

  String timestamp;

  String signature;

  List<Object?> _toList() {
    return <Object?>[
      partnerParams,
      callbackUrl,
      allowNewEnroll,
      partnerId,
      timestamp,
      signature,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterPrepUploadRequest decode(Object result) {
    result as List<Object?>;
    return FlutterPrepUploadRequest(
      partnerParams: result[0]! as FlutterPartnerParams,
      callbackUrl: result[1] as String?,
      allowNewEnroll: result[2]! as bool,
      partnerId: result[3]! as String,
      timestamp: result[4]! as String,
      signature: result[5]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterPrepUploadRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterPrepUploadResponse {
  FlutterPrepUploadResponse({
    required this.code,
    required this.refId,
    required this.uploadUrl,
    required this.smileJobId,
  });

  String code;

  String refId;

  String uploadUrl;

  String smileJobId;

  List<Object?> _toList() {
    return <Object?>[
      code,
      refId,
      uploadUrl,
      smileJobId,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterPrepUploadResponse decode(Object result) {
    result as List<Object?>;
    return FlutterPrepUploadResponse(
      code: result[0]! as String,
      refId: result[1]! as String,
      uploadUrl: result[2]! as String,
      smileJobId: result[3]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterPrepUploadResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterUploadRequest {
  FlutterUploadRequest({
    required this.images,
    this.idInfo,
  });

  List<FlutterUploadImageInfo?> images;

  FlutterIdInfo? idInfo;

  List<Object?> _toList() {
    return <Object?>[
      images,
      idInfo,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterUploadRequest decode(Object result) {
    result as List<Object?>;
    return FlutterUploadRequest(
      images: (result[0] as List<Object?>?)!.cast<FlutterUploadImageInfo?>(),
      idInfo: result[1] as FlutterIdInfo?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterUploadRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterUploadImageInfo {
  FlutterUploadImageInfo({
    required this.imageTypeId,
    required this.imageName,
  });

  FlutterImageType imageTypeId;

  String imageName;

  List<Object?> _toList() {
    return <Object?>[
      imageTypeId,
      imageName,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterUploadImageInfo decode(Object result) {
    result as List<Object?>;
    return FlutterUploadImageInfo(
      imageTypeId: result[0]! as FlutterImageType,
      imageName: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterUploadImageInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterIdInfo {
  FlutterIdInfo({
    required this.country,
    this.idType,
    this.idNumber,
    this.firstName,
    this.middleName,
    this.lastName,
    this.dob,
    this.bankCode,
    this.entered,
  });

  String country;

  String? idType;

  String? idNumber;

  String? firstName;

  String? middleName;

  String? lastName;

  String? dob;

  String? bankCode;

  bool? entered;

  List<Object?> _toList() {
    return <Object?>[
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      bankCode,
      entered,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterIdInfo decode(Object result) {
    result as List<Object?>;
    return FlutterIdInfo(
      country: result[0]! as String,
      idType: result[1] as String?,
      idNumber: result[2] as String?,
      firstName: result[3] as String?,
      middleName: result[4] as String?,
      lastName: result[5] as String?,
      dob: result[6] as String?,
      bankCode: result[7] as String?,
      entered: result[8] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterIdInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterEnhancedKycResponse {
  FlutterEnhancedKycResponse({
    required this.smileJobId,
    required this.partnerParams,
    required this.resultText,
    required this.resultCode,
    required this.actions,
    required this.country,
    required this.idType,
    required this.idNumber,
    this.fullName,
    this.expirationDate,
    this.dob,
    this.base64Photo,
  });

  String smileJobId;

  FlutterPartnerParams partnerParams;

  String resultText;

  String resultCode;

  FlutterActions actions;

  String country;

  String idType;

  String idNumber;

  String? fullName;

  String? expirationDate;

  String? dob;

  String? base64Photo;

  List<Object?> _toList() {
    return <Object?>[
      smileJobId,
      partnerParams,
      resultText,
      resultCode,
      actions,
      country,
      idType,
      idNumber,
      fullName,
      expirationDate,
      dob,
      base64Photo,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterEnhancedKycResponse decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedKycResponse(
      smileJobId: result[0]! as String,
      partnerParams: result[1]! as FlutterPartnerParams,
      resultText: result[2]! as String,
      resultCode: result[3]! as String,
      actions: result[4]! as FlutterActions,
      country: result[5]! as String,
      idType: result[6]! as String,
      idNumber: result[7]! as String,
      fullName: result[8] as String?,
      expirationDate: result[9] as String?,
      dob: result[10] as String?,
      base64Photo: result[11] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterEnhancedKycResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterActions {
  FlutterActions({
    required this.documentCheck,
    required this.humanReviewCompare,
    required this.humanReviewDocumentCheck,
    required this.humanReviewLivenessCheck,
    required this.humanReviewSelfieCheck,
    required this.humanReviewUpdateSelfie,
    required this.livenessCheck,
    required this.registerSelfie,
    required this.returnPersonalInfo,
    required this.selfieCheck,
    required this.selfieProvided,
    required this.selfieToIdAuthorityCompare,
    required this.selfieToIdCardCompare,
    required this.selfieToRegisteredSelfieCompare,
    required this.updateRegisteredSelfieOnFile,
    required this.verifyDocument,
    required this.verifyIdNumber,
  });

  FlutterActionResult documentCheck;

  FlutterActionResult humanReviewCompare;

  FlutterActionResult humanReviewDocumentCheck;

  FlutterActionResult humanReviewLivenessCheck;

  FlutterActionResult humanReviewSelfieCheck;

  FlutterActionResult humanReviewUpdateSelfie;

  FlutterActionResult livenessCheck;

  FlutterActionResult registerSelfie;

  FlutterActionResult returnPersonalInfo;

  FlutterActionResult selfieCheck;

  FlutterActionResult selfieProvided;

  FlutterActionResult selfieToIdAuthorityCompare;

  FlutterActionResult selfieToIdCardCompare;

  FlutterActionResult selfieToRegisteredSelfieCompare;

  FlutterActionResult updateRegisteredSelfieOnFile;

  FlutterActionResult verifyDocument;

  FlutterActionResult verifyIdNumber;

  List<Object?> _toList() {
    return <Object?>[
      documentCheck,
      humanReviewCompare,
      humanReviewDocumentCheck,
      humanReviewLivenessCheck,
      humanReviewSelfieCheck,
      humanReviewUpdateSelfie,
      livenessCheck,
      registerSelfie,
      returnPersonalInfo,
      selfieCheck,
      selfieProvided,
      selfieToIdAuthorityCompare,
      selfieToIdCardCompare,
      selfieToRegisteredSelfieCompare,
      updateRegisteredSelfieOnFile,
      verifyDocument,
      verifyIdNumber,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterActions decode(Object result) {
    result as List<Object?>;
    return FlutterActions(
      documentCheck: result[0]! as FlutterActionResult,
      humanReviewCompare: result[1]! as FlutterActionResult,
      humanReviewDocumentCheck: result[2]! as FlutterActionResult,
      humanReviewLivenessCheck: result[3]! as FlutterActionResult,
      humanReviewSelfieCheck: result[4]! as FlutterActionResult,
      humanReviewUpdateSelfie: result[5]! as FlutterActionResult,
      livenessCheck: result[6]! as FlutterActionResult,
      registerSelfie: result[7]! as FlutterActionResult,
      returnPersonalInfo: result[8]! as FlutterActionResult,
      selfieCheck: result[9]! as FlutterActionResult,
      selfieProvided: result[10]! as FlutterActionResult,
      selfieToIdAuthorityCompare: result[11]! as FlutterActionResult,
      selfieToIdCardCompare: result[12]! as FlutterActionResult,
      selfieToRegisteredSelfieCompare: result[13]! as FlutterActionResult,
      updateRegisteredSelfieOnFile: result[14]! as FlutterActionResult,
      verifyDocument: result[15]! as FlutterActionResult,
      verifyIdNumber: result[16]! as FlutterActionResult,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterActions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// [canAccess] Whether or not the ID type is enabled for the partner
/// [consentRequired] Whether or not consent is required for the ID type
class FlutterConsentInfo {
  FlutterConsentInfo({
    required this.canAccess,
    required this.consentRequired,
  });

  bool canAccess;

  bool consentRequired;

  List<Object?> _toList() {
    return <Object?>[
      canAccess,
      consentRequired,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterConsentInfo decode(Object result) {
    result as List<Object?>;
    return FlutterConsentInfo(
      canAccess: result[0]! as bool,
      consentRequired: result[1]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterConsentInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// [timestamp] is *not* a [DateTime] because technically, any arbitrary value could have been
/// passed to it. This applies to all other timestamp fields in the SDK.
class FlutterEnhancedKycRequest {
  FlutterEnhancedKycRequest({
    required this.country,
    required this.idType,
    required this.idNumber,
    this.firstName,
    this.middleName,
    this.lastName,
    this.dob,
    this.phoneNumber,
    this.bankCode,
    this.callbackUrl,
    required this.partnerParams,
    required this.timestamp,
    required this.signature,
    this.consentInformation,
  });

  String country;

  String idType;

  String idNumber;

  String? firstName;

  String? middleName;

  String? lastName;

  String? dob;

  String? phoneNumber;

  String? bankCode;

  String? callbackUrl;

  FlutterPartnerParams partnerParams;

  String timestamp;

  String signature;

  FlutterConsentInformation? consentInformation;

  List<Object?> _toList() {
    return <Object?>[
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      phoneNumber,
      bankCode,
      callbackUrl,
      partnerParams,
      timestamp,
      signature,
      consentInformation,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterEnhancedKycRequest decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedKycRequest(
      country: result[0]! as String,
      idType: result[1]! as String,
      idNumber: result[2]! as String,
      firstName: result[3] as String?,
      middleName: result[4] as String?,
      lastName: result[5] as String?,
      dob: result[6] as String?,
      phoneNumber: result[7] as String?,
      bankCode: result[8] as String?,
      callbackUrl: result[9] as String?,
      partnerParams: result[10]! as FlutterPartnerParams,
      timestamp: result[11]! as String,
      signature: result[12]! as String,
      consentInformation: result[13] as FlutterConsentInformation?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterEnhancedKycRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterEnhancedKycAsyncResponse {
  FlutterEnhancedKycAsyncResponse({
    required this.success,
  });

  bool success;

  List<Object?> _toList() {
    return <Object?>[
      success,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterEnhancedKycAsyncResponse decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedKycAsyncResponse(
      success: result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterEnhancedKycAsyncResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterImageLinks {
  FlutterImageLinks({
    this.selfieImageUrl,
    this.error,
  });

  String? selfieImageUrl;

  String? error;

  List<Object?> _toList() {
    return <Object?>[
      selfieImageUrl,
      error,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterImageLinks decode(Object result) {
    result as List<Object?>;
    return FlutterImageLinks(
      selfieImageUrl: result[0] as String?,
      error: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterImageLinks || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterJobStatusRequest {
  FlutterJobStatusRequest({
    required this.userId,
    required this.jobId,
    required this.includeImageLinks,
    required this.includeHistory,
    required this.partnerId,
    required this.timestamp,
    required this.signature,
  });

  String userId;

  String jobId;

  bool includeImageLinks;

  bool includeHistory;

  String partnerId;

  String timestamp;

  String signature;

  List<Object?> _toList() {
    return <Object?>[
      userId,
      jobId,
      includeImageLinks,
      includeHistory,
      partnerId,
      timestamp,
      signature,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterJobStatusRequest decode(Object result) {
    result as List<Object?>;
    return FlutterJobStatusRequest(
      userId: result[0]! as String,
      jobId: result[1]! as String,
      includeImageLinks: result[2]! as bool,
      includeHistory: result[3]! as bool,
      partnerId: result[4]! as String,
      timestamp: result[5]! as String,
      signature: result[6]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterJobStatusRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterSmartSelfieJobResult {
  FlutterSmartSelfieJobResult({
    required this.actions,
    required this.resultCode,
    required this.resultText,
    required this.smileJobId,
    required this.partnerParams,
    this.confidence,
  });

  FlutterActions actions;

  String resultCode;

  String resultText;

  String smileJobId;

  FlutterPartnerParams partnerParams;

  double? confidence;

  List<Object?> _toList() {
    return <Object?>[
      actions,
      resultCode,
      resultText,
      smileJobId,
      partnerParams,
      confidence,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterSmartSelfieJobResult decode(Object result) {
    result as List<Object?>;
    return FlutterSmartSelfieJobResult(
      actions: result[0]! as FlutterActions,
      resultCode: result[1]! as String,
      resultText: result[2]! as String,
      smileJobId: result[3]! as String,
      partnerParams: result[4]! as FlutterPartnerParams,
      confidence: result[5] as double?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterSmartSelfieJobResult ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterSmartSelfieJobStatusResponse {
  FlutterSmartSelfieJobStatusResponse({
    required this.timestamp,
    required this.jobComplete,
    required this.jobSuccess,
    required this.code,
    this.result,
    this.resultString,
    this.history,
    this.imageLinks,
  });

  String timestamp;

  bool jobComplete;

  bool jobSuccess;

  String code;

  FlutterSmartSelfieJobResult? result;

  String? resultString;

  List<FlutterSmartSelfieJobResult?>? history;

  FlutterImageLinks? imageLinks;

  List<Object?> _toList() {
    return <Object?>[
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result,
      resultString,
      history,
      imageLinks,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterSmartSelfieJobStatusResponse decode(Object result) {
    result as List<Object?>;
    return FlutterSmartSelfieJobStatusResponse(
      timestamp: result[0]! as String,
      jobComplete: result[1]! as bool,
      jobSuccess: result[2]! as bool,
      code: result[3]! as String,
      result: result[4] as FlutterSmartSelfieJobResult?,
      resultString: result[5] as String?,
      history:
          (result[6] as List<Object?>?)?.cast<FlutterSmartSelfieJobResult?>(),
      imageLinks: result[7] as FlutterImageLinks?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterSmartSelfieJobStatusResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterSmartSelfieResponse {
  FlutterSmartSelfieResponse({
    required this.code,
    required this.createdAt,
    required this.jobId,
    required this.jobType,
    required this.message,
    required this.partnerId,
    this.partnerParams,
    required this.status,
    required this.updatedAt,
    required this.userId,
  });

  String code;

  String createdAt;

  String jobId;

  FlutterJobTypeV2 jobType;

  String message;

  String partnerId;

  Map<String?, String?>? partnerParams;

  FlutterSmartSelfieStatus status;

  String updatedAt;

  String userId;

  List<Object?> _toList() {
    return <Object?>[
      code,
      createdAt,
      jobId,
      jobType,
      message,
      partnerId,
      partnerParams,
      status,
      updatedAt,
      userId,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterSmartSelfieResponse decode(Object result) {
    result as List<Object?>;
    return FlutterSmartSelfieResponse(
      code: result[0]! as String,
      createdAt: result[1]! as String,
      jobId: result[2]! as String,
      jobType: result[3]! as FlutterJobTypeV2,
      message: result[4]! as String,
      partnerId: result[5]! as String,
      partnerParams:
          (result[6] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      status: result[7]! as FlutterSmartSelfieStatus,
      updatedAt: result[8]! as String,
      userId: result[9]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterSmartSelfieResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterDocumentVerificationJobResult {
  FlutterDocumentVerificationJobResult({
    required this.actions,
    required this.resultCode,
    required this.resultText,
    required this.smileJobId,
    required this.partnerParams,
    this.country,
    this.idType,
    this.idNumber,
    this.fullName,
    this.dob,
    this.gender,
    this.expirationDate,
    this.documentImageBase64,
    this.phoneNumber,
    this.phoneNumber2,
    this.address,
  });

  FlutterActions actions;

  String resultCode;

  String resultText;

  String smileJobId;

  FlutterPartnerParams partnerParams;

  String? country;

  String? idType;

  String? idNumber;

  String? fullName;

  String? dob;

  String? gender;

  String? expirationDate;

  String? documentImageBase64;

  String? phoneNumber;

  String? phoneNumber2;

  String? address;

  List<Object?> _toList() {
    return <Object?>[
      actions,
      resultCode,
      resultText,
      smileJobId,
      partnerParams,
      country,
      idType,
      idNumber,
      fullName,
      dob,
      gender,
      expirationDate,
      documentImageBase64,
      phoneNumber,
      phoneNumber2,
      address,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterDocumentVerificationJobResult decode(Object result) {
    result as List<Object?>;
    return FlutterDocumentVerificationJobResult(
      actions: result[0]! as FlutterActions,
      resultCode: result[1]! as String,
      resultText: result[2]! as String,
      smileJobId: result[3]! as String,
      partnerParams: result[4]! as FlutterPartnerParams,
      country: result[5] as String?,
      idType: result[6] as String?,
      idNumber: result[7] as String?,
      fullName: result[8] as String?,
      dob: result[9] as String?,
      gender: result[10] as String?,
      expirationDate: result[11] as String?,
      documentImageBase64: result[12] as String?,
      phoneNumber: result[13] as String?,
      phoneNumber2: result[14] as String?,
      address: result[15] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterDocumentVerificationJobResult ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterDocumentVerificationJobStatusResponse {
  FlutterDocumentVerificationJobStatusResponse({
    required this.timestamp,
    required this.jobComplete,
    required this.jobSuccess,
    required this.code,
    this.result,
    this.resultString,
    this.history,
    this.imageLinks,
  });

  String timestamp;

  bool jobComplete;

  bool jobSuccess;

  String code;

  FlutterDocumentVerificationJobResult? result;

  String? resultString;

  List<FlutterDocumentVerificationJobResult?>? history;

  FlutterImageLinks? imageLinks;

  List<Object?> _toList() {
    return <Object?>[
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result,
      resultString,
      history,
      imageLinks,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterDocumentVerificationJobStatusResponse decode(Object result) {
    result as List<Object?>;
    return FlutterDocumentVerificationJobStatusResponse(
      timestamp: result[0]! as String,
      jobComplete: result[1]! as bool,
      jobSuccess: result[2]! as bool,
      code: result[3]! as String,
      result: result[4] as FlutterDocumentVerificationJobResult?,
      resultString: result[5] as String?,
      history: (result[6] as List<Object?>?)
          ?.cast<FlutterDocumentVerificationJobResult?>(),
      imageLinks: result[7] as FlutterImageLinks?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterDocumentVerificationJobStatusResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterBiometricKycJobResult {
  FlutterBiometricKycJobResult({
    required this.actions,
    required this.resultCode,
    required this.resultText,
    required this.resultType,
    required this.smileJobId,
    required this.partnerParams,
    this.dob,
    this.photoBase64,
    this.gender,
    this.idType,
    this.address,
    this.country,
    this.documentImageBase64,
    this.fullData,
    this.fullName,
    this.idNumber,
    this.phoneNumber,
    this.phoneNumber2,
    this.expirationDate,
    this.secondaryIdNumber,
    this.idNumberPreviouslyRegistered,
    this.previousRegistrantsUserIds,
  });

  FlutterActions actions;

  String resultCode;

  String resultText;

  String resultType;

  String smileJobId;

  FlutterPartnerParams partnerParams;

  String? dob;

  String? photoBase64;

  String? gender;

  String? idType;

  String? address;

  String? country;

  String? documentImageBase64;

  Map<String?, String?>? fullData;

  String? fullName;

  String? idNumber;

  String? phoneNumber;

  String? phoneNumber2;

  String? expirationDate;

  String? secondaryIdNumber;

  bool? idNumberPreviouslyRegistered;

  List<String?>? previousRegistrantsUserIds;

  List<Object?> _toList() {
    return <Object?>[
      actions,
      resultCode,
      resultText,
      resultType,
      smileJobId,
      partnerParams,
      dob,
      photoBase64,
      gender,
      idType,
      address,
      country,
      documentImageBase64,
      fullData,
      fullName,
      idNumber,
      phoneNumber,
      phoneNumber2,
      expirationDate,
      secondaryIdNumber,
      idNumberPreviouslyRegistered,
      previousRegistrantsUserIds,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterBiometricKycJobResult decode(Object result) {
    result as List<Object?>;
    return FlutterBiometricKycJobResult(
      actions: result[0]! as FlutterActions,
      resultCode: result[1]! as String,
      resultText: result[2]! as String,
      resultType: result[3]! as String,
      smileJobId: result[4]! as String,
      partnerParams: result[5]! as FlutterPartnerParams,
      dob: result[6] as String?,
      photoBase64: result[7] as String?,
      gender: result[8] as String?,
      idType: result[9] as String?,
      address: result[10] as String?,
      country: result[11] as String?,
      documentImageBase64: result[12] as String?,
      fullData:
          (result[13] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      fullName: result[14] as String?,
      idNumber: result[15] as String?,
      phoneNumber: result[16] as String?,
      phoneNumber2: result[17] as String?,
      expirationDate: result[18] as String?,
      secondaryIdNumber: result[19] as String?,
      idNumberPreviouslyRegistered: result[20] as bool?,
      previousRegistrantsUserIds:
          (result[21] as List<Object?>?)?.cast<String?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterBiometricKycJobResult ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterBiometricKycJobStatusResponse {
  FlutterBiometricKycJobStatusResponse({
    required this.timestamp,
    required this.jobComplete,
    required this.jobSuccess,
    required this.code,
    this.result,
    this.resultString,
    this.history,
    this.imageLinks,
  });

  String timestamp;

  bool jobComplete;

  bool jobSuccess;

  String code;

  FlutterBiometricKycJobResult? result;

  String? resultString;

  List<FlutterBiometricKycJobResult?>? history;

  FlutterImageLinks? imageLinks;

  List<Object?> _toList() {
    return <Object?>[
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result,
      resultString,
      history,
      imageLinks,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterBiometricKycJobStatusResponse decode(Object result) {
    result as List<Object?>;
    return FlutterBiometricKycJobStatusResponse(
      timestamp: result[0]! as String,
      jobComplete: result[1]! as bool,
      jobSuccess: result[2]! as bool,
      code: result[3]! as String,
      result: result[4] as FlutterBiometricKycJobResult?,
      resultString: result[5] as String?,
      history:
          (result[6] as List<Object?>?)?.cast<FlutterBiometricKycJobResult?>(),
      imageLinks: result[7] as FlutterImageLinks?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterBiometricKycJobStatusResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterEnhancedDocumentVerificationJobResult {
  FlutterEnhancedDocumentVerificationJobResult({
    required this.actions,
    required this.resultCode,
    required this.resultText,
    required this.resultType,
    required this.smileJobId,
    required this.partnerParams,
    this.dob,
    this.photoBase64,
    this.gender,
    this.idType,
    this.address,
    this.country,
    this.documentImageBase64,
    this.fullData,
    this.fullName,
    this.idNumber,
    this.phoneNumber,
    this.phoneNumber2,
    this.expirationDate,
    this.secondaryIdNumber,
    this.idNumberPreviouslyRegistered,
    this.previousRegistrantsUserIds,
  });

  FlutterActions actions;

  String resultCode;

  String resultText;

  String resultType;

  String smileJobId;

  FlutterPartnerParams partnerParams;

  String? dob;

  String? photoBase64;

  String? gender;

  String? idType;

  String? address;

  String? country;

  String? documentImageBase64;

  Map<String?, String?>? fullData;

  String? fullName;

  String? idNumber;

  String? phoneNumber;

  String? phoneNumber2;

  String? expirationDate;

  String? secondaryIdNumber;

  bool? idNumberPreviouslyRegistered;

  List<String?>? previousRegistrantsUserIds;

  List<Object?> _toList() {
    return <Object?>[
      actions,
      resultCode,
      resultText,
      resultType,
      smileJobId,
      partnerParams,
      dob,
      photoBase64,
      gender,
      idType,
      address,
      country,
      documentImageBase64,
      fullData,
      fullName,
      idNumber,
      phoneNumber,
      phoneNumber2,
      expirationDate,
      secondaryIdNumber,
      idNumberPreviouslyRegistered,
      previousRegistrantsUserIds,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterEnhancedDocumentVerificationJobResult decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedDocumentVerificationJobResult(
      actions: result[0]! as FlutterActions,
      resultCode: result[1]! as String,
      resultText: result[2]! as String,
      resultType: result[3]! as String,
      smileJobId: result[4]! as String,
      partnerParams: result[5]! as FlutterPartnerParams,
      dob: result[6] as String?,
      photoBase64: result[7] as String?,
      gender: result[8] as String?,
      idType: result[9] as String?,
      address: result[10] as String?,
      country: result[11] as String?,
      documentImageBase64: result[12] as String?,
      fullData:
          (result[13] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      fullName: result[14] as String?,
      idNumber: result[15] as String?,
      phoneNumber: result[16] as String?,
      phoneNumber2: result[17] as String?,
      expirationDate: result[18] as String?,
      secondaryIdNumber: result[19] as String?,
      idNumberPreviouslyRegistered: result[20] as bool?,
      previousRegistrantsUserIds:
          (result[21] as List<Object?>?)?.cast<String?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterEnhancedDocumentVerificationJobResult ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterEnhancedDocumentVerificationJobStatusResponse {
  FlutterEnhancedDocumentVerificationJobStatusResponse({
    required this.timestamp,
    required this.jobComplete,
    required this.jobSuccess,
    required this.code,
    this.result,
    this.resultString,
    this.history,
    this.imageLinks,
  });

  String timestamp;

  bool jobComplete;

  bool jobSuccess;

  String code;

  FlutterEnhancedDocumentVerificationJobResult? result;

  String? resultString;

  List<FlutterEnhancedDocumentVerificationJobResult?>? history;

  FlutterImageLinks? imageLinks;

  List<Object?> _toList() {
    return <Object?>[
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result,
      resultString,
      history,
      imageLinks,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterEnhancedDocumentVerificationJobStatusResponse decode(
      Object result) {
    result as List<Object?>;
    return FlutterEnhancedDocumentVerificationJobStatusResponse(
      timestamp: result[0]! as String,
      jobComplete: result[1]! as bool,
      jobSuccess: result[2]! as bool,
      code: result[3]! as String,
      result: result[4] as FlutterEnhancedDocumentVerificationJobResult?,
      resultString: result[5] as String?,
      history: (result[6] as List<Object?>?)
          ?.cast<FlutterEnhancedDocumentVerificationJobResult?>(),
      imageLinks: result[7] as FlutterImageLinks?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterEnhancedDocumentVerificationJobStatusResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterProductsConfigRequest {
  FlutterProductsConfigRequest({
    required this.partnerId,
    required this.timestamp,
    required this.signature,
  });

  String partnerId;

  String timestamp;

  String signature;

  List<Object?> _toList() {
    return <Object?>[
      partnerId,
      timestamp,
      signature,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterProductsConfigRequest decode(Object result) {
    result as List<Object?>;
    return FlutterProductsConfigRequest(
      partnerId: result[0]! as String,
      timestamp: result[1]! as String,
      signature: result[2]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterProductsConfigRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterProductsConfigResponse {
  FlutterProductsConfigResponse({
    required this.consentRequired,
    required this.idSelection,
  });

  Map<String?, List<String?>?> consentRequired;

  FlutterIdSelection idSelection;

  List<Object?> _toList() {
    return <Object?>[
      consentRequired,
      idSelection,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterProductsConfigResponse decode(Object result) {
    result as List<Object?>;
    return FlutterProductsConfigResponse(
      consentRequired: (result[0] as Map<Object?, Object?>?)!
          .cast<String?, List<String?>?>(),
      idSelection: result[1]! as FlutterIdSelection,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterProductsConfigResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterIdSelection {
  FlutterIdSelection({
    required this.basicKyc,
    required this.biometricKyc,
    required this.enhancedKyc,
    required this.documentVerification,
  });

  Map<String?, List<String?>?> basicKyc;

  Map<String?, List<String?>?> biometricKyc;

  Map<String?, List<String?>?> enhancedKyc;

  Map<String?, List<String?>?> documentVerification;

  List<Object?> _toList() {
    return <Object?>[
      basicKyc,
      biometricKyc,
      enhancedKyc,
      documentVerification,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterIdSelection decode(Object result) {
    result as List<Object?>;
    return FlutterIdSelection(
      basicKyc: (result[0] as Map<Object?, Object?>?)!
          .cast<String?, List<String?>?>(),
      biometricKyc: (result[1] as Map<Object?, Object?>?)!
          .cast<String?, List<String?>?>(),
      enhancedKyc: (result[2] as Map<Object?, Object?>?)!
          .cast<String?, List<String?>?>(),
      documentVerification: (result[3] as Map<Object?, Object?>?)!
          .cast<String?, List<String?>?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterIdSelection || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterValidDocumentsResponse {
  FlutterValidDocumentsResponse({
    required this.validDocuments,
  });

  List<FlutterValidDocument?> validDocuments;

  List<Object?> _toList() {
    return <Object?>[
      validDocuments,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterValidDocumentsResponse decode(Object result) {
    result as List<Object?>;
    return FlutterValidDocumentsResponse(
      validDocuments:
          (result[0] as List<Object?>?)!.cast<FlutterValidDocument?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterValidDocumentsResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterValidDocument {
  FlutterValidDocument({
    required this.country,
    required this.idTypes,
  });

  FlutterCountry country;

  List<FlutterIdType?> idTypes;

  List<Object?> _toList() {
    return <Object?>[
      country,
      idTypes,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterValidDocument decode(Object result) {
    result as List<Object?>;
    return FlutterValidDocument(
      country: result[0]! as FlutterCountry,
      idTypes: (result[1] as List<Object?>?)!.cast<FlutterIdType?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterValidDocument || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterCountry {
  FlutterCountry({
    required this.code,
    required this.continent,
    required this.name,
  });

  String code;

  String continent;

  String name;

  List<Object?> _toList() {
    return <Object?>[
      code,
      continent,
      name,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterCountry decode(Object result) {
    result as List<Object?>;
    return FlutterCountry(
      code: result[0]! as String,
      continent: result[1]! as String,
      name: result[2]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterCountry || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterIdType {
  FlutterIdType({
    required this.code,
    required this.example,
    required this.hasBack,
    required this.name,
  });

  String code;

  List<String?> example;

  bool hasBack;

  String name;

  List<Object?> _toList() {
    return <Object?>[
      code,
      example,
      hasBack,
      name,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterIdType decode(Object result) {
    result as List<Object?>;
    return FlutterIdType(
      code: result[0]! as String,
      example: (result[1] as List<Object?>?)!.cast<String?>(),
      hasBack: result[2]! as bool,
      name: result[3]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterIdType || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterServicesResponse {
  FlutterServicesResponse({
    required this.bankCodes,
    required this.hostedWeb,
  });

  List<FlutterBankCode?> bankCodes;

  FlutterHostedWeb hostedWeb;

  List<Object?> _toList() {
    return <Object?>[
      bankCodes,
      hostedWeb,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterServicesResponse decode(Object result) {
    result as List<Object?>;
    return FlutterServicesResponse(
      bankCodes: (result[0] as List<Object?>?)!.cast<FlutterBankCode?>(),
      hostedWeb: result[1]! as FlutterHostedWeb,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterServicesResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterBankCode {
  FlutterBankCode({
    required this.name,
    required this.code,
  });

  String name;

  String code;

  List<Object?> _toList() {
    return <Object?>[
      name,
      code,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterBankCode decode(Object result) {
    result as List<Object?>;
    return FlutterBankCode(
      name: result[0]! as String,
      code: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterBankCode || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterHostedWeb {
  FlutterHostedWeb({
    required this.basicKyc,
    required this.biometricKyc,
    required this.enhancedKyc,
    required this.documentVerification,
    required this.enhancedKycSmartSelfie,
    required this.enhancedDocumentVerification,
  });

  Map<String?, FlutterCountryInfo?> basicKyc;

  Map<String?, FlutterCountryInfo?> biometricKyc;

  Map<String?, FlutterCountryInfo?> enhancedKyc;

  Map<String?, FlutterCountryInfo?> documentVerification;

  Map<String?, FlutterCountryInfo?> enhancedKycSmartSelfie;

  Map<String?, FlutterCountryInfo?> enhancedDocumentVerification;

  List<Object?> _toList() {
    return <Object?>[
      basicKyc,
      biometricKyc,
      enhancedKyc,
      documentVerification,
      enhancedKycSmartSelfie,
      enhancedDocumentVerification,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterHostedWeb decode(Object result) {
    result as List<Object?>;
    return FlutterHostedWeb(
      basicKyc: (result[0] as Map<Object?, Object?>?)!
          .cast<String?, FlutterCountryInfo?>(),
      biometricKyc: (result[1] as Map<Object?, Object?>?)!
          .cast<String?, FlutterCountryInfo?>(),
      enhancedKyc: (result[2] as Map<Object?, Object?>?)!
          .cast<String?, FlutterCountryInfo?>(),
      documentVerification: (result[3] as Map<Object?, Object?>?)!
          .cast<String?, FlutterCountryInfo?>(),
      enhancedKycSmartSelfie: (result[4] as Map<Object?, Object?>?)!
          .cast<String?, FlutterCountryInfo?>(),
      enhancedDocumentVerification: (result[5] as Map<Object?, Object?>?)!
          .cast<String?, FlutterCountryInfo?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterHostedWeb || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterCountryInfo {
  FlutterCountryInfo({
    required this.countryCode,
    required this.name,
    required this.availableIdTypes,
  });

  String countryCode;

  String name;

  List<FlutterAvailableIdType?> availableIdTypes;

  List<Object?> _toList() {
    return <Object?>[
      countryCode,
      name,
      availableIdTypes,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterCountryInfo decode(Object result) {
    result as List<Object?>;
    return FlutterCountryInfo(
      countryCode: result[0]! as String,
      name: result[1]! as String,
      availableIdTypes:
          (result[2] as List<Object?>?)!.cast<FlutterAvailableIdType?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterCountryInfo || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterAvailableIdType {
  FlutterAvailableIdType({
    required this.idTypeKey,
    required this.label,
    required this.requiredFields,
    this.testData,
    this.idNumberRegex,
  });

  String idTypeKey;

  String label;

  List<String?> requiredFields;

  String? testData;

  String? idNumberRegex;

  List<Object?> _toList() {
    return <Object?>[
      idTypeKey,
      label,
      requiredFields,
      testData,
      idNumberRegex,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterAvailableIdType decode(Object result) {
    result as List<Object?>;
    return FlutterAvailableIdType(
      idTypeKey: result[0]! as String,
      label: result[1]! as String,
      requiredFields: (result[2] as List<Object?>?)!.cast<String?>(),
      testData: result[3] as String?,
      idNumberRegex: result[4] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterAvailableIdType || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class FlutterConfig {
  FlutterConfig({
    required this.partnerId,
    required this.authToken,
    required this.prodBaseUrl,
    required this.sandboxBaseUrl,
  });

  String partnerId;

  String authToken;

  String prodBaseUrl;

  String sandboxBaseUrl;

  List<Object?> _toList() {
    return <Object?>[
      partnerId,
      authToken,
      prodBaseUrl,
      sandboxBaseUrl,
    ];
  }

  Object encode() {
    return _toList();
  }

  static FlutterConfig decode(Object result) {
    result as List<Object?>;
    return FlutterConfig(
      partnerId: result[0]! as String,
      authToken: result[1]! as String,
      prodBaseUrl: result[2]! as String,
      sandboxBaseUrl: result[3]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FlutterConfig || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is FlutterJobType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is FlutterJobTypeV2) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is FlutterImageType) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    } else if (value is FlutterActionResult) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    } else if (value is FlutterSmartSelfieStatus) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    } else if (value is FlutterConsentInformation) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is FlutterPartnerParams) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is FlutterAuthenticationRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is FlutterAuthenticationResponse) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is FlutterPrepUploadRequest) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is FlutterPrepUploadResponse) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is FlutterUploadRequest) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is FlutterUploadImageInfo) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is FlutterIdInfo) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is FlutterEnhancedKycResponse) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is FlutterActions) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is FlutterConsentInfo) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is FlutterEnhancedKycRequest) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is FlutterEnhancedKycAsyncResponse) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is FlutterImageLinks) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is FlutterJobStatusRequest) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is FlutterSmartSelfieJobResult) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is FlutterSmartSelfieJobStatusResponse) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is FlutterSmartSelfieResponse) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is FlutterDocumentVerificationJobResult) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is FlutterDocumentVerificationJobStatusResponse) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else if (value is FlutterBiometricKycJobResult) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else if (value is FlutterBiometricKycJobStatusResponse) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    } else if (value is FlutterEnhancedDocumentVerificationJobResult) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    } else if (value is FlutterEnhancedDocumentVerificationJobStatusResponse) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    } else if (value is FlutterProductsConfigRequest) {
      buffer.putUint8(159);
      writeValue(buffer, value.encode());
    } else if (value is FlutterProductsConfigResponse) {
      buffer.putUint8(160);
      writeValue(buffer, value.encode());
    } else if (value is FlutterIdSelection) {
      buffer.putUint8(161);
      writeValue(buffer, value.encode());
    } else if (value is FlutterValidDocumentsResponse) {
      buffer.putUint8(162);
      writeValue(buffer, value.encode());
    } else if (value is FlutterValidDocument) {
      buffer.putUint8(163);
      writeValue(buffer, value.encode());
    } else if (value is FlutterCountry) {
      buffer.putUint8(164);
      writeValue(buffer, value.encode());
    } else if (value is FlutterIdType) {
      buffer.putUint8(165);
      writeValue(buffer, value.encode());
    } else if (value is FlutterServicesResponse) {
      buffer.putUint8(166);
      writeValue(buffer, value.encode());
    } else if (value is FlutterBankCode) {
      buffer.putUint8(167);
      writeValue(buffer, value.encode());
    } else if (value is FlutterHostedWeb) {
      buffer.putUint8(168);
      writeValue(buffer, value.encode());
    } else if (value is FlutterCountryInfo) {
      buffer.putUint8(169);
      writeValue(buffer, value.encode());
    } else if (value is FlutterAvailableIdType) {
      buffer.putUint8(170);
      writeValue(buffer, value.encode());
    } else if (value is FlutterConfig) {
      buffer.putUint8(171);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterJobType.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterJobTypeV2.values[value];
      case 131:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterImageType.values[value];
      case 132:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterActionResult.values[value];
      case 133:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterSmartSelfieStatus.values[value];
      case 134:
        return FlutterConsentInformation.decode(readValue(buffer)!);
      case 135:
        return FlutterPartnerParams.decode(readValue(buffer)!);
      case 136:
        return FlutterAuthenticationRequest.decode(readValue(buffer)!);
      case 137:
        return FlutterAuthenticationResponse.decode(readValue(buffer)!);
      case 138:
        return FlutterPrepUploadRequest.decode(readValue(buffer)!);
      case 139:
        return FlutterPrepUploadResponse.decode(readValue(buffer)!);
      case 140:
        return FlutterUploadRequest.decode(readValue(buffer)!);
      case 141:
        return FlutterUploadImageInfo.decode(readValue(buffer)!);
      case 142:
        return FlutterIdInfo.decode(readValue(buffer)!);
      case 143:
        return FlutterEnhancedKycResponse.decode(readValue(buffer)!);
      case 144:
        return FlutterActions.decode(readValue(buffer)!);
      case 145:
        return FlutterConsentInfo.decode(readValue(buffer)!);
      case 146:
        return FlutterEnhancedKycRequest.decode(readValue(buffer)!);
      case 147:
        return FlutterEnhancedKycAsyncResponse.decode(readValue(buffer)!);
      case 148:
        return FlutterImageLinks.decode(readValue(buffer)!);
      case 149:
        return FlutterJobStatusRequest.decode(readValue(buffer)!);
      case 150:
        return FlutterSmartSelfieJobResult.decode(readValue(buffer)!);
      case 151:
        return FlutterSmartSelfieJobStatusResponse.decode(readValue(buffer)!);
      case 152:
        return FlutterSmartSelfieResponse.decode(readValue(buffer)!);
      case 153:
        return FlutterDocumentVerificationJobResult.decode(readValue(buffer)!);
      case 154:
        return FlutterDocumentVerificationJobStatusResponse.decode(
            readValue(buffer)!);
      case 155:
        return FlutterBiometricKycJobResult.decode(readValue(buffer)!);
      case 156:
        return FlutterBiometricKycJobStatusResponse.decode(readValue(buffer)!);
      case 157:
        return FlutterEnhancedDocumentVerificationJobResult.decode(
            readValue(buffer)!);
      case 158:
        return FlutterEnhancedDocumentVerificationJobStatusResponse.decode(
            readValue(buffer)!);
      case 159:
        return FlutterProductsConfigRequest.decode(readValue(buffer)!);
      case 160:
        return FlutterProductsConfigResponse.decode(readValue(buffer)!);
      case 161:
        return FlutterIdSelection.decode(readValue(buffer)!);
      case 162:
        return FlutterValidDocumentsResponse.decode(readValue(buffer)!);
      case 163:
        return FlutterValidDocument.decode(readValue(buffer)!);
      case 164:
        return FlutterCountry.decode(readValue(buffer)!);
      case 165:
        return FlutterIdType.decode(readValue(buffer)!);
      case 166:
        return FlutterServicesResponse.decode(readValue(buffer)!);
      case 167:
        return FlutterBankCode.decode(readValue(buffer)!);
      case 168:
        return FlutterHostedWeb.decode(readValue(buffer)!);
      case 169:
        return FlutterCountryInfo.decode(readValue(buffer)!);
      case 170:
        return FlutterAvailableIdType.decode(readValue(buffer)!);
      case 171:
        return FlutterConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class SmileIDApi {
  /// Constructor for [SmileIDApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SmileIDApi(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initializeWithApiKey(String apiKey, FlutterConfig config,
      bool useSandbox, bool enableCrashReporting) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.initializeWithApiKey$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel
        .send(<Object?>[apiKey, config, useSandbox, enableCrashReporting]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> initializeWithConfig(
      FlutterConfig config, bool useSandbox, bool enableCrashReporting) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.initializeWithConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel
        .send(<Object?>[config, useSandbox, enableCrashReporting]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> initialize(bool useSandbox) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.initialize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[useSandbox]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCallbackUrl(String callbackUrl) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.setCallbackUrl$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[callbackUrl]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAllowOfflineMode(bool allowOfflineMode) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.setAllowOfflineMode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[allowOfflineMode]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<String>> getSubmittedJobs() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getSubmittedJobs$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String>();
    }
  }

  Future<List<String>> getUnsubmittedJobs() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getUnsubmittedJobs$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String>();
    }
  }

  Future<void> cleanup(String jobId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.cleanup$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[jobId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> cleanupJobs(List<String> jobIds) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.cleanupJobs$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[jobIds]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> submitJob(String jobId, bool deleteFilesOnSuccess) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.submitJob$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[jobId, deleteFilesOnSuccess]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<FlutterAuthenticationResponse> authenticate(
      FlutterAuthenticationRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.authenticate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterAuthenticationResponse?)!;
    }
  }

  Future<FlutterPrepUploadResponse> prepUpload(
      FlutterPrepUploadRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.prepUpload$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterPrepUploadResponse?)!;
    }
  }

  Future<void> upload(String url, FlutterUploadRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.upload$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[url, request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<FlutterEnhancedKycResponse> doEnhancedKyc(
      FlutterEnhancedKycRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.doEnhancedKyc$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterEnhancedKycResponse?)!;
    }
  }

  Future<FlutterEnhancedKycAsyncResponse> doEnhancedKycAsync(
      FlutterEnhancedKycRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.doEnhancedKycAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterEnhancedKycAsyncResponse?)!;
    }
  }

  Future<FlutterSmartSelfieJobStatusResponse> getSmartSelfieJobStatus(
      FlutterJobStatusRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getSmartSelfieJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterSmartSelfieJobStatusResponse?)!;
    }
  }

  Future<FlutterSmartSelfieResponse> doSmartSelfieEnrollment(
      String signature,
      String timestamp,
      String selfieImage,
      List<String> livenessImages,
      String userId,
      Map<String?, String?>? partnerParams,
      String? callbackUrl,
      int? sandboxResult,
      bool? allowNewEnroll) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.doSmartSelfieEnrollment$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      signature,
      timestamp,
      selfieImage,
      livenessImages,
      userId,
      partnerParams,
      callbackUrl,
      sandboxResult,
      allowNewEnroll
    ]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterSmartSelfieResponse?)!;
    }
  }

  Future<FlutterSmartSelfieResponse> doSmartSelfieAuthentication(
      String signature,
      String timestamp,
      String selfieImage,
      List<String> livenessImages,
      String userId,
      Map<String?, String?>? partnerParams,
      String? callbackUrl,
      int? sandboxResult) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.doSmartSelfieAuthentication$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      signature,
      timestamp,
      selfieImage,
      livenessImages,
      userId,
      partnerParams,
      callbackUrl,
      sandboxResult
    ]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterSmartSelfieResponse?)!;
    }
  }

  Future<FlutterDocumentVerificationJobStatusResponse>
      getDocumentVerificationJobStatus(FlutterJobStatusRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getDocumentVerificationJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as FlutterDocumentVerificationJobStatusResponse?)!;
    }
  }

  Future<FlutterBiometricKycJobStatusResponse> getBiometricKycJobStatus(
      FlutterJobStatusRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getBiometricKycJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterBiometricKycJobStatusResponse?)!;
    }
  }

  Future<FlutterEnhancedDocumentVerificationJobStatusResponse>
      getEnhancedDocumentVerificationJobStatus(
          FlutterJobStatusRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getEnhancedDocumentVerificationJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as FlutterEnhancedDocumentVerificationJobStatusResponse?)!;
    }
  }

  Future<FlutterProductsConfigResponse> getProductsConfig(
      FlutterProductsConfigRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getProductsConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterProductsConfigResponse?)!;
    }
  }

  Future<FlutterValidDocumentsResponse> getValidDocuments(
      FlutterProductsConfigRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getValidDocuments$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterValidDocumentsResponse?)!;
    }
  }

  Future<FlutterServicesResponse> getServices() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.getServices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterServicesResponse?)!;
    }
  }

  Future<FlutterSmartSelfieJobStatusResponse> pollSmartSelfieJobStatus(
      FlutterJobStatusRequest request, int interval, int numAttempts) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.pollSmartSelfieJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request, interval, numAttempts]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterSmartSelfieJobStatusResponse?)!;
    }
  }

  Future<FlutterDocumentVerificationJobStatusResponse>
      pollDocumentVerificationJobStatus(FlutterJobStatusRequest request,
          int interval, int numAttempts) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.pollDocumentVerificationJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request, interval, numAttempts]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as FlutterDocumentVerificationJobStatusResponse?)!;
    }
  }

  Future<FlutterBiometricKycJobStatusResponse> pollBiometricKycJobStatus(
      FlutterJobStatusRequest request, int interval, int numAttempts) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.pollBiometricKycJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request, interval, numAttempts]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterBiometricKycJobStatusResponse?)!;
    }
  }

  Future<FlutterEnhancedDocumentVerificationJobStatusResponse>
      pollEnhancedDocumentVerificationJobStatus(FlutterJobStatusRequest request,
          int interval, int numAttempts) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.smileid.SmileIDApi.pollEnhancedDocumentVerificationJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[request, interval, numAttempts]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as FlutterEnhancedDocumentVerificationJobStatusResponse?)!;
    }
  }
}
