// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum FlutterJobType {
  biometric_kyc,
}

class FlutterPartnerParams {
  FlutterPartnerParams({
    this.jobType,
    required this.jobId,
    required this.userId,
    required this.extras,
  });

  FlutterJobType? jobType;

  String jobId;

  String userId;

  Map<String?, String?> extras;

  Object encode() {
    return <Object?>[
      jobType?.index,
      jobId,
      userId,
      extras,
    ];
  }

  static FlutterPartnerParams decode(Object result) {
    result as List<Object?>;
    return FlutterPartnerParams(
      jobType: result[0] != null
          ? FlutterJobType.values[result[0]! as int]
          : null,
      jobId: result[1]! as String,
      userId: result[2]! as String,
      extras: (result[3] as Map<Object?, Object?>?)!.cast<String?, String?>(),
    );
  }
}

class FlutterEnhancedKycRequest {
  FlutterEnhancedKycRequest({
    required this.country,
    required this.idType,
    required this.idNumber,
    this.firstName,
    this.middleName,
    this.lastName,
    this.dob,
    this.phoneNumber,
    this.bankCode,
    this.callbackUrl,
    required this.partnerParams,
    required this.partnerId,
    required this.sourceSdk,
    required this.sourceSdkVersion,
    required this.timestamp,
    required this.signature,
  });

  String country;

  String idType;

  String idNumber;

  String? firstName;

  String? middleName;

  String? lastName;

  String? dob;

  String? phoneNumber;

  String? bankCode;

  String? callbackUrl;

  FlutterPartnerParams partnerParams;

  String partnerId;

  String sourceSdk;

  String sourceSdkVersion;

  String timestamp;

  String signature;

  Object encode() {
    return <Object?>[
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      phoneNumber,
      bankCode,
      callbackUrl,
      partnerParams.encode(),
      partnerId,
      sourceSdk,
      sourceSdkVersion,
      timestamp,
      signature,
    ];
  }

  static FlutterEnhancedKycRequest decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedKycRequest(
      country: result[0]! as String,
      idType: result[1]! as String,
      idNumber: result[2]! as String,
      firstName: result[3] as String?,
      middleName: result[4] as String?,
      lastName: result[5] as String?,
      dob: result[6] as String?,
      phoneNumber: result[7] as String?,
      bankCode: result[8] as String?,
      callbackUrl: result[9] as String?,
      partnerParams: FlutterPartnerParams.decode(result[10]! as List<Object?>),
      partnerId: result[11]! as String,
      sourceSdk: result[12]! as String,
      sourceSdkVersion: result[13]! as String,
      timestamp: result[14]! as String,
      signature: result[15]! as String,
    );
  }
}

class FlutterEnhancedKycAsyncResponse {
  FlutterEnhancedKycAsyncResponse({
    required this.success,
  });

  bool success;

  Object encode() {
    return <Object?>[
      success,
    ];
  }

  static FlutterEnhancedKycAsyncResponse decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedKycAsyncResponse(
      success: result[0]! as bool,
    );
  }
}

class _SmileIdApiCodec extends StandardMessageCodec {
  const _SmileIdApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FlutterEnhancedKycAsyncResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is FlutterEnhancedKycRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is FlutterPartnerParams) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FlutterEnhancedKycAsyncResponse.decode(readValue(buffer)!);
      case 129: 
        return FlutterEnhancedKycRequest.decode(readValue(buffer)!);
      case 130: 
        return FlutterPartnerParams.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class SmileIdApi {
  /// Constructor for [SmileIdApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SmileIdApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _SmileIdApiCodec();

  Future<String?> getPlatformVersion() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.smileid.SmileIdApi.getPlatformVersion', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as String?);
    }
  }

  Future<void> initialize() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.smileid.SmileIdApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<FlutterEnhancedKycAsyncResponse?> doEnhancedKycAsync(FlutterEnhancedKycRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.smileid.SmileIdApi.doEnhancedKycAsync', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as FlutterEnhancedKycAsyncResponse?);
    }
  }
}
