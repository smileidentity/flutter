// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

enum FlutterJobType {
  enhancedKyc,
  documentVerification,
  biometricKyc,
  enhancedDocumentVerification,
  smartSelfieEnrollment,
  smartSelfieAuthentication,
}

enum FlutterJobTypeV2 {
  smartSelfieAuthentication,
  smartSelfieEnrollment,
}

enum FlutterImageType {
  selfieJpgFile,
  idCardJpgFile,
  selfieJpgBase64,
  idCardJpgBase64,
  livenessJpgFile,
  idCardRearJpgFile,
  livenessJpgBase64,
  idCardRearJpgBase64,
}

enum FlutterActionResult {
  passed,
  completed,
  approved,
  verified,
  provisionallyApproved,
  returned,
  notReturned,
  failed,
  rejected,
  underReview,
  unableToDetermine,
  notApplicable,
  notVerified,
  notDone,
  issuerUnavailable,
  idAuthorityPhotoNotAvailable,
  sentToHumanReview,
  unknown,
}

enum FlutterSmartSelfieStatus {
  approved,
  pending,
  rejected,
  unknown,
}

class FlutterConsentInformation {
  FlutterConsentInformation({
    required this.consentGrantedDate,
    required this.personalDetailsConsentGranted,
    required this.contactInfoConsentGranted,
    required this.documentInfoConsentGranted,
  });

  String consentGrantedDate;

  bool personalDetailsConsentGranted;

  bool contactInfoConsentGranted;

  bool documentInfoConsentGranted;

  Object encode() {
    return <Object?>[
      consentGrantedDate,
      personalDetailsConsentGranted,
      contactInfoConsentGranted,
      documentInfoConsentGranted,
    ];
  }

  static FlutterConsentInformation decode(Object result) {
    result as List<Object?>;
    return FlutterConsentInformation(
      consentGrantedDate: result[0]! as String,
      personalDetailsConsentGranted: result[1]! as bool,
      contactInfoConsentGranted: result[2]! as bool,
      documentInfoConsentGranted: result[3]! as bool,
    );
  }
}

///  Custom values specific to partners can be placed in [extras]
class FlutterPartnerParams {
  FlutterPartnerParams({
    this.jobType,
    required this.jobId,
    required this.userId,
    this.extras,
  });

  FlutterJobType? jobType;

  String jobId;

  String userId;

  Map<String?, String?>? extras;

  Object encode() {
    return <Object?>[
      jobType,
      jobId,
      userId,
      extras,
    ];
  }

  static FlutterPartnerParams decode(Object result) {
    result as List<Object?>;
    return FlutterPartnerParams(
      jobType: result[0] as FlutterJobType?,
      jobId: result[1]! as String,
      userId: result[2]! as String,
      extras: (result[3] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

/// The Auth Smile request. Auth Smile serves multiple purposes:
///
/// - It is used to fetch the signature needed for subsequent API requests
/// - It indicates the type of job that will being performed
/// - It is used to fetch consent information for the partner
///
/// [jobType] The type of job that will be performed
/// [country] The country code of the country where the job is being performed. This value is
/// required in order to get back consent information for the partner
/// [idType] The type of ID that will be used for the job. This value is required in order to
/// get back consent information for the partner
/// [updateEnrolledImage] Whether or not the enrolled image should be updated with image
/// submitted for this job
/// [jobId] The job ID to associate with the job. Most often, this will correspond to a unique
/// Job ID within your own system. If not provided, a random job ID will be generated
/// [userId] The user ID to associate with the job. Most often, this will correspond to a unique
/// User ID within your own system. If not provided, a random user ID will be generated
class FlutterAuthenticationRequest {
  FlutterAuthenticationRequest({
    required this.jobType,
    this.country,
    this.idType,
    this.updateEnrolledImage,
    this.jobId,
    this.userId,
  });

  FlutterJobType jobType;

  String? country;

  String? idType;

  bool? updateEnrolledImage;

  String? jobId;

  String? userId;

  Object encode() {
    return <Object?>[
      jobType,
      country,
      idType,
      updateEnrolledImage,
      jobId,
      userId,
    ];
  }

  static FlutterAuthenticationRequest decode(Object result) {
    result as List<Object?>;
    return FlutterAuthenticationRequest(
      jobType: result[0]! as FlutterJobType,
      country: result[1] as String?,
      idType: result[2] as String?,
      updateEnrolledImage: result[3] as bool?,
      jobId: result[4] as String?,
      userId: result[5] as String?,
    );
  }
}

/// [consentInfo] is only populated when a country and ID type are provided in the
/// [FlutterAuthenticationRequest]. To get information about *all* countries and ID types instead,
///  [SmileIDService.getProductsConfig]
///
/// [timestamp] is *not* a [DateTime] because technically, any arbitrary value could have been
/// passed to it. This applies to all other timestamp fields in the SDK.
class FlutterAuthenticationResponse {
  FlutterAuthenticationResponse({
    required this.success,
    required this.signature,
    required this.timestamp,
    required this.partnerParams,
    this.callbackUrl,
    this.consentInfo,
  });

  bool success;

  String signature;

  String timestamp;

  FlutterPartnerParams partnerParams;

  String? callbackUrl;

  FlutterConsentInfo? consentInfo;

  Object encode() {
    return <Object?>[
      success,
      signature,
      timestamp,
      partnerParams,
      callbackUrl,
      consentInfo,
    ];
  }

  static FlutterAuthenticationResponse decode(Object result) {
    result as List<Object?>;
    return FlutterAuthenticationResponse(
      success: result[0]! as bool,
      signature: result[1]! as String,
      timestamp: result[2]! as String,
      partnerParams: result[3]! as FlutterPartnerParams,
      callbackUrl: result[4] as String?,
      consentInfo: result[5] as FlutterConsentInfo?,
    );
  }
}

class FlutterPrepUploadRequest {
  FlutterPrepUploadRequest({
    required this.partnerParams,
    this.callbackUrl,
    required this.allowNewEnroll,
    required this.partnerId,
    required this.timestamp,
    required this.signature,
  });

  FlutterPartnerParams partnerParams;

  String? callbackUrl;

  bool allowNewEnroll;

  String partnerId;

  String timestamp;

  String signature;

  Object encode() {
    return <Object?>[
      partnerParams,
      callbackUrl,
      allowNewEnroll,
      partnerId,
      timestamp,
      signature,
    ];
  }

  static FlutterPrepUploadRequest decode(Object result) {
    result as List<Object?>;
    return FlutterPrepUploadRequest(
      partnerParams: result[0]! as FlutterPartnerParams,
      callbackUrl: result[1] as String?,
      allowNewEnroll: result[2]! as bool,
      partnerId: result[3]! as String,
      timestamp: result[4]! as String,
      signature: result[5]! as String,
    );
  }
}

class FlutterPrepUploadResponse {
  FlutterPrepUploadResponse({
    required this.code,
    required this.refId,
    required this.uploadUrl,
    required this.smileJobId,
  });

  String code;

  String refId;

  String uploadUrl;

  String smileJobId;

  Object encode() {
    return <Object?>[
      code,
      refId,
      uploadUrl,
      smileJobId,
    ];
  }

  static FlutterPrepUploadResponse decode(Object result) {
    result as List<Object?>;
    return FlutterPrepUploadResponse(
      code: result[0]! as String,
      refId: result[1]! as String,
      uploadUrl: result[2]! as String,
      smileJobId: result[3]! as String,
    );
  }
}

class FlutterUploadRequest {
  FlutterUploadRequest({
    required this.images,
    this.idInfo,
  });

  List<FlutterUploadImageInfo?> images;

  FlutterIdInfo? idInfo;

  Object encode() {
    return <Object?>[
      images,
      idInfo,
    ];
  }

  static FlutterUploadRequest decode(Object result) {
    result as List<Object?>;
    return FlutterUploadRequest(
      images: (result[0] as List<Object?>?)!.cast<FlutterUploadImageInfo?>(),
      idInfo: result[1] as FlutterIdInfo?,
    );
  }
}

class FlutterUploadImageInfo {
  FlutterUploadImageInfo({
    required this.imageTypeId,
    required this.imageName,
  });

  FlutterImageType imageTypeId;

  String imageName;

  Object encode() {
    return <Object?>[
      imageTypeId,
      imageName,
    ];
  }

  static FlutterUploadImageInfo decode(Object result) {
    result as List<Object?>;
    return FlutterUploadImageInfo(
      imageTypeId: result[0]! as FlutterImageType,
      imageName: result[1]! as String,
    );
  }
}

class FlutterIdInfo {
  FlutterIdInfo({
    required this.country,
    this.idType,
    this.idNumber,
    this.firstName,
    this.middleName,
    this.lastName,
    this.dob,
    this.bankCode,
    this.entered,
  });

  String country;

  String? idType;

  String? idNumber;

  String? firstName;

  String? middleName;

  String? lastName;

  String? dob;

  String? bankCode;

  bool? entered;

  Object encode() {
    return <Object?>[
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      bankCode,
      entered,
    ];
  }

  static FlutterIdInfo decode(Object result) {
    result as List<Object?>;
    return FlutterIdInfo(
      country: result[0]! as String,
      idType: result[1] as String?,
      idNumber: result[2] as String?,
      firstName: result[3] as String?,
      middleName: result[4] as String?,
      lastName: result[5] as String?,
      dob: result[6] as String?,
      bankCode: result[7] as String?,
      entered: result[8] as bool?,
    );
  }
}

class FlutterEnhancedKycResponse {
  FlutterEnhancedKycResponse({
    required this.smileJobId,
    required this.partnerParams,
    required this.resultText,
    required this.resultCode,
    required this.actions,
    required this.country,
    required this.idType,
    required this.idNumber,
    this.fullName,
    this.expirationDate,
    this.dob,
    this.base64Photo,
  });

  String smileJobId;

  FlutterPartnerParams partnerParams;

  String resultText;

  String resultCode;

  FlutterActions actions;

  String country;

  String idType;

  String idNumber;

  String? fullName;

  String? expirationDate;

  String? dob;

  String? base64Photo;

  Object encode() {
    return <Object?>[
      smileJobId,
      partnerParams,
      resultText,
      resultCode,
      actions,
      country,
      idType,
      idNumber,
      fullName,
      expirationDate,
      dob,
      base64Photo,
    ];
  }

  static FlutterEnhancedKycResponse decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedKycResponse(
      smileJobId: result[0]! as String,
      partnerParams: result[1]! as FlutterPartnerParams,
      resultText: result[2]! as String,
      resultCode: result[3]! as String,
      actions: result[4]! as FlutterActions,
      country: result[5]! as String,
      idType: result[6]! as String,
      idNumber: result[7]! as String,
      fullName: result[8] as String?,
      expirationDate: result[9] as String?,
      dob: result[10] as String?,
      base64Photo: result[11] as String?,
    );
  }
}

class FlutterActions {
  FlutterActions({
    required this.documentCheck,
    required this.humanReviewCompare,
    required this.humanReviewDocumentCheck,
    required this.humanReviewLivenessCheck,
    required this.humanReviewSelfieCheck,
    required this.humanReviewUpdateSelfie,
    required this.livenessCheck,
    required this.registerSelfie,
    required this.returnPersonalInfo,
    required this.selfieCheck,
    required this.selfieProvided,
    required this.selfieToIdAuthorityCompare,
    required this.selfieToIdCardCompare,
    required this.selfieToRegisteredSelfieCompare,
    required this.updateRegisteredSelfieOnFile,
    required this.verifyDocument,
    required this.verifyIdNumber,
  });

  FlutterActionResult documentCheck;

  FlutterActionResult humanReviewCompare;

  FlutterActionResult humanReviewDocumentCheck;

  FlutterActionResult humanReviewLivenessCheck;

  FlutterActionResult humanReviewSelfieCheck;

  FlutterActionResult humanReviewUpdateSelfie;

  FlutterActionResult livenessCheck;

  FlutterActionResult registerSelfie;

  FlutterActionResult returnPersonalInfo;

  FlutterActionResult selfieCheck;

  FlutterActionResult selfieProvided;

  FlutterActionResult selfieToIdAuthorityCompare;

  FlutterActionResult selfieToIdCardCompare;

  FlutterActionResult selfieToRegisteredSelfieCompare;

  FlutterActionResult updateRegisteredSelfieOnFile;

  FlutterActionResult verifyDocument;

  FlutterActionResult verifyIdNumber;

  Object encode() {
    return <Object?>[
      documentCheck,
      humanReviewCompare,
      humanReviewDocumentCheck,
      humanReviewLivenessCheck,
      humanReviewSelfieCheck,
      humanReviewUpdateSelfie,
      livenessCheck,
      registerSelfie,
      returnPersonalInfo,
      selfieCheck,
      selfieProvided,
      selfieToIdAuthorityCompare,
      selfieToIdCardCompare,
      selfieToRegisteredSelfieCompare,
      updateRegisteredSelfieOnFile,
      verifyDocument,
      verifyIdNumber,
    ];
  }

  static FlutterActions decode(Object result) {
    result as List<Object?>;
    return FlutterActions(
      documentCheck: result[0]! as FlutterActionResult,
      humanReviewCompare: result[1]! as FlutterActionResult,
      humanReviewDocumentCheck: result[2]! as FlutterActionResult,
      humanReviewLivenessCheck: result[3]! as FlutterActionResult,
      humanReviewSelfieCheck: result[4]! as FlutterActionResult,
      humanReviewUpdateSelfie: result[5]! as FlutterActionResult,
      livenessCheck: result[6]! as FlutterActionResult,
      registerSelfie: result[7]! as FlutterActionResult,
      returnPersonalInfo: result[8]! as FlutterActionResult,
      selfieCheck: result[9]! as FlutterActionResult,
      selfieProvided: result[10]! as FlutterActionResult,
      selfieToIdAuthorityCompare: result[11]! as FlutterActionResult,
      selfieToIdCardCompare: result[12]! as FlutterActionResult,
      selfieToRegisteredSelfieCompare: result[13]! as FlutterActionResult,
      updateRegisteredSelfieOnFile: result[14]! as FlutterActionResult,
      verifyDocument: result[15]! as FlutterActionResult,
      verifyIdNumber: result[16]! as FlutterActionResult,
    );
  }
}

/// [canAccess] Whether or not the ID type is enabled for the partner
/// [consentRequired] Whether or not consent is required for the ID type
class FlutterConsentInfo {
  FlutterConsentInfo({
    required this.canAccess,
    required this.consentRequired,
  });

  bool canAccess;

  bool consentRequired;

  Object encode() {
    return <Object?>[
      canAccess,
      consentRequired,
    ];
  }

  static FlutterConsentInfo decode(Object result) {
    result as List<Object?>;
    return FlutterConsentInfo(
      canAccess: result[0]! as bool,
      consentRequired: result[1]! as bool,
    );
  }
}

/// [timestamp] is *not* a [DateTime] because technically, any arbitrary value could have been
/// passed to it. This applies to all other timestamp fields in the SDK.
class FlutterEnhancedKycRequest {
  FlutterEnhancedKycRequest({
    required this.country,
    required this.idType,
    required this.idNumber,
    this.firstName,
    this.middleName,
    this.lastName,
    this.dob,
    this.phoneNumber,
    this.bankCode,
    this.callbackUrl,
    required this.partnerParams,
    required this.timestamp,
    required this.signature,
    required this.consentInformation,
  });

  String country;

  String idType;

  String idNumber;

  String? firstName;

  String? middleName;

  String? lastName;

  String? dob;

  String? phoneNumber;

  String? bankCode;

  String? callbackUrl;

  FlutterPartnerParams partnerParams;

  String timestamp;

  String signature;

  FlutterConsentInformation consentInformation;

  Object encode() {
    return <Object?>[
      country,
      idType,
      idNumber,
      firstName,
      middleName,
      lastName,
      dob,
      phoneNumber,
      bankCode,
      callbackUrl,
      partnerParams,
      timestamp,
      signature,
      consentInformation,
    ];
  }

  static FlutterEnhancedKycRequest decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedKycRequest(
      country: result[0]! as String,
      idType: result[1]! as String,
      idNumber: result[2]! as String,
      firstName: result[3] as String?,
      middleName: result[4] as String?,
      lastName: result[5] as String?,
      dob: result[6] as String?,
      phoneNumber: result[7] as String?,
      bankCode: result[8] as String?,
      callbackUrl: result[9] as String?,
      partnerParams: result[10]! as FlutterPartnerParams,
      timestamp: result[11]! as String,
      signature: result[12]! as String,
      consentInformation: result[13]! as FlutterConsentInformation,
    );
  }
}

class FlutterEnhancedKycAsyncResponse {
  FlutterEnhancedKycAsyncResponse({
    required this.success,
  });

  bool success;

  Object encode() {
    return <Object?>[
      success,
    ];
  }

  static FlutterEnhancedKycAsyncResponse decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedKycAsyncResponse(
      success: result[0]! as bool,
    );
  }
}

class FlutterImageLinks {
  FlutterImageLinks({
    this.selfieImageUrl,
    this.error,
  });

  String? selfieImageUrl;

  String? error;

  Object encode() {
    return <Object?>[
      selfieImageUrl,
      error,
    ];
  }

  static FlutterImageLinks decode(Object result) {
    result as List<Object?>;
    return FlutterImageLinks(
      selfieImageUrl: result[0] as String?,
      error: result[1] as String?,
    );
  }
}

class FlutterAntifraud {
  FlutterAntifraud({
    required this.suspectUsers,
  });

  List<FlutterSuspectUser?> suspectUsers;

  Object encode() {
    return <Object?>[
      suspectUsers,
    ];
  }

  static FlutterAntifraud decode(Object result) {
    result as List<Object?>;
    return FlutterAntifraud(
      suspectUsers: (result[0] as List<Object?>?)!.cast<FlutterSuspectUser?>(),
    );
  }
}

class FlutterSuspectUser {
  FlutterSuspectUser({
    required this.reason,
    required this.userId,
  });

  String reason;

  String userId;

  Object encode() {
    return <Object?>[
      reason,
      userId,
    ];
  }

  static FlutterSuspectUser decode(Object result) {
    result as List<Object?>;
    return FlutterSuspectUser(
      reason: result[0]! as String,
      userId: result[1]! as String,
    );
  }
}

class FlutterJobStatusRequest {
  FlutterJobStatusRequest({
    required this.userId,
    required this.jobId,
    required this.includeImageLinks,
    required this.includeHistory,
    required this.partnerId,
    required this.timestamp,
    required this.signature,
  });

  String userId;

  String jobId;

  bool includeImageLinks;

  bool includeHistory;

  String partnerId;

  String timestamp;

  String signature;

  Object encode() {
    return <Object?>[
      userId,
      jobId,
      includeImageLinks,
      includeHistory,
      partnerId,
      timestamp,
      signature,
    ];
  }

  static FlutterJobStatusRequest decode(Object result) {
    result as List<Object?>;
    return FlutterJobStatusRequest(
      userId: result[0]! as String,
      jobId: result[1]! as String,
      includeImageLinks: result[2]! as bool,
      includeHistory: result[3]! as bool,
      partnerId: result[4]! as String,
      timestamp: result[5]! as String,
      signature: result[6]! as String,
    );
  }
}

class FlutterSmartSelfieJobResult {
  FlutterSmartSelfieJobResult({
    required this.actions,
    required this.resultCode,
    required this.resultText,
    required this.smileJobId,
    required this.partnerParams,
    this.confidence,
  });

  FlutterActions actions;

  String resultCode;

  String resultText;

  String smileJobId;

  FlutterPartnerParams partnerParams;

  double? confidence;

  Object encode() {
    return <Object?>[
      actions,
      resultCode,
      resultText,
      smileJobId,
      partnerParams,
      confidence,
    ];
  }

  static FlutterSmartSelfieJobResult decode(Object result) {
    result as List<Object?>;
    return FlutterSmartSelfieJobResult(
      actions: result[0]! as FlutterActions,
      resultCode: result[1]! as String,
      resultText: result[2]! as String,
      smileJobId: result[3]! as String,
      partnerParams: result[4]! as FlutterPartnerParams,
      confidence: result[5] as double?,
    );
  }
}

class FlutterSmartSelfieJobStatusResponse {
  FlutterSmartSelfieJobStatusResponse({
    required this.timestamp,
    required this.jobComplete,
    required this.jobSuccess,
    required this.code,
    this.result,
    this.resultString,
    this.history,
    this.imageLinks,
  });

  String timestamp;

  bool jobComplete;

  bool jobSuccess;

  String code;

  FlutterSmartSelfieJobResult? result;

  String? resultString;

  List<FlutterSmartSelfieJobResult?>? history;

  FlutterImageLinks? imageLinks;

  Object encode() {
    return <Object?>[
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result,
      resultString,
      history,
      imageLinks,
    ];
  }

  static FlutterSmartSelfieJobStatusResponse decode(Object result) {
    result as List<Object?>;
    return FlutterSmartSelfieJobStatusResponse(
      timestamp: result[0]! as String,
      jobComplete: result[1]! as bool,
      jobSuccess: result[2]! as bool,
      code: result[3]! as String,
      result: result[4] as FlutterSmartSelfieJobResult?,
      resultString: result[5] as String?,
      history: (result[6] as List<Object?>?)?.cast<FlutterSmartSelfieJobResult?>(),
      imageLinks: result[7] as FlutterImageLinks?,
    );
  }
}

class FlutterSmartSelfieResponse {
  FlutterSmartSelfieResponse({
    required this.code,
    required this.createdAt,
    required this.jobId,
    required this.jobType,
    required this.message,
    required this.partnerId,
    this.partnerParams,
    required this.status,
    required this.updatedAt,
    required this.userId,
  });

  String code;

  String createdAt;

  String jobId;

  FlutterJobTypeV2 jobType;

  String message;

  String partnerId;

  Map<String?, String?>? partnerParams;

  FlutterSmartSelfieStatus status;

  String updatedAt;

  String userId;

  Object encode() {
    return <Object?>[
      code,
      createdAt,
      jobId,
      jobType,
      message,
      partnerId,
      partnerParams,
      status,
      updatedAt,
      userId,
    ];
  }

  static FlutterSmartSelfieResponse decode(Object result) {
    result as List<Object?>;
    return FlutterSmartSelfieResponse(
      code: result[0]! as String,
      createdAt: result[1]! as String,
      jobId: result[2]! as String,
      jobType: result[3]! as FlutterJobTypeV2,
      message: result[4]! as String,
      partnerId: result[5]! as String,
      partnerParams: (result[6] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      status: result[7]! as FlutterSmartSelfieStatus,
      updatedAt: result[8]! as String,
      userId: result[9]! as String,
    );
  }
}

class FlutterDocumentVerificationJobResult {
  FlutterDocumentVerificationJobResult({
    required this.actions,
    required this.resultCode,
    required this.resultText,
    required this.smileJobId,
    required this.partnerParams,
    this.country,
    this.idType,
    this.idNumber,
    this.fullName,
    this.dob,
    this.gender,
    this.expirationDate,
    this.documentImageBase64,
    this.phoneNumber,
    this.phoneNumber2,
    this.address,
  });

  FlutterActions actions;

  String resultCode;

  String resultText;

  String smileJobId;

  FlutterPartnerParams partnerParams;

  String? country;

  String? idType;

  String? idNumber;

  String? fullName;

  String? dob;

  String? gender;

  String? expirationDate;

  String? documentImageBase64;

  String? phoneNumber;

  String? phoneNumber2;

  String? address;

  Object encode() {
    return <Object?>[
      actions,
      resultCode,
      resultText,
      smileJobId,
      partnerParams,
      country,
      idType,
      idNumber,
      fullName,
      dob,
      gender,
      expirationDate,
      documentImageBase64,
      phoneNumber,
      phoneNumber2,
      address,
    ];
  }

  static FlutterDocumentVerificationJobResult decode(Object result) {
    result as List<Object?>;
    return FlutterDocumentVerificationJobResult(
      actions: result[0]! as FlutterActions,
      resultCode: result[1]! as String,
      resultText: result[2]! as String,
      smileJobId: result[3]! as String,
      partnerParams: result[4]! as FlutterPartnerParams,
      country: result[5] as String?,
      idType: result[6] as String?,
      idNumber: result[7] as String?,
      fullName: result[8] as String?,
      dob: result[9] as String?,
      gender: result[10] as String?,
      expirationDate: result[11] as String?,
      documentImageBase64: result[12] as String?,
      phoneNumber: result[13] as String?,
      phoneNumber2: result[14] as String?,
      address: result[15] as String?,
    );
  }
}

class FlutterDocumentVerificationJobStatusResponse {
  FlutterDocumentVerificationJobStatusResponse({
    required this.timestamp,
    required this.jobComplete,
    required this.jobSuccess,
    required this.code,
    this.result,
    this.resultString,
    this.history,
    this.imageLinks,
  });

  String timestamp;

  bool jobComplete;

  bool jobSuccess;

  String code;

  FlutterDocumentVerificationJobResult? result;

  String? resultString;

  List<FlutterDocumentVerificationJobResult?>? history;

  FlutterImageLinks? imageLinks;

  Object encode() {
    return <Object?>[
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result,
      resultString,
      history,
      imageLinks,
    ];
  }

  static FlutterDocumentVerificationJobStatusResponse decode(Object result) {
    result as List<Object?>;
    return FlutterDocumentVerificationJobStatusResponse(
      timestamp: result[0]! as String,
      jobComplete: result[1]! as bool,
      jobSuccess: result[2]! as bool,
      code: result[3]! as String,
      result: result[4] as FlutterDocumentVerificationJobResult?,
      resultString: result[5] as String?,
      history: (result[6] as List<Object?>?)?.cast<FlutterDocumentVerificationJobResult?>(),
      imageLinks: result[7] as FlutterImageLinks?,
    );
  }
}

class FlutterBiometricKycJobResult {
  FlutterBiometricKycJobResult({
    required this.actions,
    required this.resultCode,
    required this.resultText,
    required this.resultType,
    required this.smileJobId,
    required this.partnerParams,
    this.antifraud,
    this.dob,
    this.photoBase64,
    this.gender,
    this.idType,
    this.address,
    this.country,
    this.documentImageBase64,
    this.fullData,
    this.fullName,
    this.idNumber,
    this.phoneNumber,
    this.phoneNumber2,
    this.expirationDate,
    this.secondaryIdNumber,
    this.idNumberPreviouslyRegistered,
    this.previousRegistrantsUserIds,
  });

  FlutterActions actions;

  String resultCode;

  String resultText;

  String resultType;

  String smileJobId;

  FlutterPartnerParams partnerParams;

  FlutterAntifraud? antifraud;

  String? dob;

  String? photoBase64;

  String? gender;

  String? idType;

  String? address;

  String? country;

  String? documentImageBase64;

  Map<String?, String?>? fullData;

  String? fullName;

  String? idNumber;

  String? phoneNumber;

  String? phoneNumber2;

  String? expirationDate;

  String? secondaryIdNumber;

  bool? idNumberPreviouslyRegistered;

  List<String?>? previousRegistrantsUserIds;

  Object encode() {
    return <Object?>[
      actions,
      resultCode,
      resultText,
      resultType,
      smileJobId,
      partnerParams,
      antifraud,
      dob,
      photoBase64,
      gender,
      idType,
      address,
      country,
      documentImageBase64,
      fullData,
      fullName,
      idNumber,
      phoneNumber,
      phoneNumber2,
      expirationDate,
      secondaryIdNumber,
      idNumberPreviouslyRegistered,
      previousRegistrantsUserIds,
    ];
  }

  static FlutterBiometricKycJobResult decode(Object result) {
    result as List<Object?>;
    return FlutterBiometricKycJobResult(
      actions: result[0]! as FlutterActions,
      resultCode: result[1]! as String,
      resultText: result[2]! as String,
      resultType: result[3]! as String,
      smileJobId: result[4]! as String,
      partnerParams: result[5]! as FlutterPartnerParams,
      antifraud: result[6] as FlutterAntifraud?,
      dob: result[7] as String?,
      photoBase64: result[8] as String?,
      gender: result[9] as String?,
      idType: result[10] as String?,
      address: result[11] as String?,
      country: result[12] as String?,
      documentImageBase64: result[13] as String?,
      fullData: (result[14] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      fullName: result[15] as String?,
      idNumber: result[16] as String?,
      phoneNumber: result[17] as String?,
      phoneNumber2: result[18] as String?,
      expirationDate: result[19] as String?,
      secondaryIdNumber: result[20] as String?,
      idNumberPreviouslyRegistered: result[21] as bool?,
      previousRegistrantsUserIds: (result[22] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class FlutterBiometricKycJobStatusResponse {
  FlutterBiometricKycJobStatusResponse({
    required this.timestamp,
    required this.jobComplete,
    required this.jobSuccess,
    required this.code,
    this.result,
    this.resultString,
    this.history,
    this.imageLinks,
  });

  String timestamp;

  bool jobComplete;

  bool jobSuccess;

  String code;

  FlutterBiometricKycJobResult? result;

  String? resultString;

  List<FlutterBiometricKycJobResult?>? history;

  FlutterImageLinks? imageLinks;

  Object encode() {
    return <Object?>[
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result,
      resultString,
      history,
      imageLinks,
    ];
  }

  static FlutterBiometricKycJobStatusResponse decode(Object result) {
    result as List<Object?>;
    return FlutterBiometricKycJobStatusResponse(
      timestamp: result[0]! as String,
      jobComplete: result[1]! as bool,
      jobSuccess: result[2]! as bool,
      code: result[3]! as String,
      result: result[4] as FlutterBiometricKycJobResult?,
      resultString: result[5] as String?,
      history: (result[6] as List<Object?>?)?.cast<FlutterBiometricKycJobResult?>(),
      imageLinks: result[7] as FlutterImageLinks?,
    );
  }
}

class FlutterEnhancedDocumentVerificationJobResult {
  FlutterEnhancedDocumentVerificationJobResult({
    required this.actions,
    required this.resultCode,
    required this.resultText,
    required this.resultType,
    required this.smileJobId,
    required this.partnerParams,
    this.antifraud,
    this.dob,
    this.photoBase64,
    this.gender,
    this.idType,
    this.address,
    this.country,
    this.documentImageBase64,
    this.fullData,
    this.fullName,
    this.idNumber,
    this.phoneNumber,
    this.phoneNumber2,
    this.expirationDate,
    this.secondaryIdNumber,
    this.idNumberPreviouslyRegistered,
    this.previousRegistrantsUserIds,
  });

  FlutterActions actions;

  String resultCode;

  String resultText;

  String resultType;

  String smileJobId;

  FlutterPartnerParams partnerParams;

  FlutterAntifraud? antifraud;

  String? dob;

  String? photoBase64;

  String? gender;

  String? idType;

  String? address;

  String? country;

  String? documentImageBase64;

  Map<String?, String?>? fullData;

  String? fullName;

  String? idNumber;

  String? phoneNumber;

  String? phoneNumber2;

  String? expirationDate;

  String? secondaryIdNumber;

  bool? idNumberPreviouslyRegistered;

  List<String?>? previousRegistrantsUserIds;

  Object encode() {
    return <Object?>[
      actions,
      resultCode,
      resultText,
      resultType,
      smileJobId,
      partnerParams,
      antifraud,
      dob,
      photoBase64,
      gender,
      idType,
      address,
      country,
      documentImageBase64,
      fullData,
      fullName,
      idNumber,
      phoneNumber,
      phoneNumber2,
      expirationDate,
      secondaryIdNumber,
      idNumberPreviouslyRegistered,
      previousRegistrantsUserIds,
    ];
  }

  static FlutterEnhancedDocumentVerificationJobResult decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedDocumentVerificationJobResult(
      actions: result[0]! as FlutterActions,
      resultCode: result[1]! as String,
      resultText: result[2]! as String,
      resultType: result[3]! as String,
      smileJobId: result[4]! as String,
      partnerParams: result[5]! as FlutterPartnerParams,
      antifraud: result[6] as FlutterAntifraud?,
      dob: result[7] as String?,
      photoBase64: result[8] as String?,
      gender: result[9] as String?,
      idType: result[10] as String?,
      address: result[11] as String?,
      country: result[12] as String?,
      documentImageBase64: result[13] as String?,
      fullData: (result[14] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      fullName: result[15] as String?,
      idNumber: result[16] as String?,
      phoneNumber: result[17] as String?,
      phoneNumber2: result[18] as String?,
      expirationDate: result[19] as String?,
      secondaryIdNumber: result[20] as String?,
      idNumberPreviouslyRegistered: result[21] as bool?,
      previousRegistrantsUserIds: (result[22] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class FlutterEnhancedDocumentVerificationJobStatusResponse {
  FlutterEnhancedDocumentVerificationJobStatusResponse({
    required this.timestamp,
    required this.jobComplete,
    required this.jobSuccess,
    required this.code,
    this.result,
    this.resultString,
    this.history,
    this.imageLinks,
  });

  String timestamp;

  bool jobComplete;

  bool jobSuccess;

  String code;

  FlutterEnhancedDocumentVerificationJobResult? result;

  String? resultString;

  List<FlutterEnhancedDocumentVerificationJobResult?>? history;

  FlutterImageLinks? imageLinks;

  Object encode() {
    return <Object?>[
      timestamp,
      jobComplete,
      jobSuccess,
      code,
      result,
      resultString,
      history,
      imageLinks,
    ];
  }

  static FlutterEnhancedDocumentVerificationJobStatusResponse decode(Object result) {
    result as List<Object?>;
    return FlutterEnhancedDocumentVerificationJobStatusResponse(
      timestamp: result[0]! as String,
      jobComplete: result[1]! as bool,
      jobSuccess: result[2]! as bool,
      code: result[3]! as String,
      result: result[4] as FlutterEnhancedDocumentVerificationJobResult?,
      resultString: result[5] as String?,
      history: (result[6] as List<Object?>?)?.cast<FlutterEnhancedDocumentVerificationJobResult?>(),
      imageLinks: result[7] as FlutterImageLinks?,
    );
  }
}

class FlutterProductsConfigRequest {
  FlutterProductsConfigRequest({
    required this.partnerId,
    required this.timestamp,
    required this.signature,
  });

  String partnerId;

  String timestamp;

  String signature;

  Object encode() {
    return <Object?>[
      partnerId,
      timestamp,
      signature,
    ];
  }

  static FlutterProductsConfigRequest decode(Object result) {
    result as List<Object?>;
    return FlutterProductsConfigRequest(
      partnerId: result[0]! as String,
      timestamp: result[1]! as String,
      signature: result[2]! as String,
    );
  }
}

class FlutterProductsConfigResponse {
  FlutterProductsConfigResponse({
    required this.consentRequired,
    required this.idSelection,
  });

  Map<String?, List<String?>?> consentRequired;

  FlutterIdSelection idSelection;

  Object encode() {
    return <Object?>[
      consentRequired,
      idSelection,
    ];
  }

  static FlutterProductsConfigResponse decode(Object result) {
    result as List<Object?>;
    return FlutterProductsConfigResponse(
      consentRequired: (result[0] as Map<Object?, Object?>?)!.cast<String?, List<String?>?>(),
      idSelection: result[1]! as FlutterIdSelection,
    );
  }
}

class FlutterIdSelection {
  FlutterIdSelection({
    required this.basicKyc,
    required this.biometricKyc,
    required this.enhancedKyc,
    required this.documentVerification,
  });

  Map<String?, List<String?>?> basicKyc;

  Map<String?, List<String?>?> biometricKyc;

  Map<String?, List<String?>?> enhancedKyc;

  Map<String?, List<String?>?> documentVerification;

  Object encode() {
    return <Object?>[
      basicKyc,
      biometricKyc,
      enhancedKyc,
      documentVerification,
    ];
  }

  static FlutterIdSelection decode(Object result) {
    result as List<Object?>;
    return FlutterIdSelection(
      basicKyc: (result[0] as Map<Object?, Object?>?)!.cast<String?, List<String?>?>(),
      biometricKyc: (result[1] as Map<Object?, Object?>?)!.cast<String?, List<String?>?>(),
      enhancedKyc: (result[2] as Map<Object?, Object?>?)!.cast<String?, List<String?>?>(),
      documentVerification: (result[3] as Map<Object?, Object?>?)!.cast<String?, List<String?>?>(),
    );
  }
}

class FlutterValidDocumentsResponse {
  FlutterValidDocumentsResponse({
    required this.validDocuments,
  });

  List<FlutterValidDocument?> validDocuments;

  Object encode() {
    return <Object?>[
      validDocuments,
    ];
  }

  static FlutterValidDocumentsResponse decode(Object result) {
    result as List<Object?>;
    return FlutterValidDocumentsResponse(
      validDocuments: (result[0] as List<Object?>?)!.cast<FlutterValidDocument?>(),
    );
  }
}

class FlutterValidDocument {
  FlutterValidDocument({
    required this.country,
    required this.idTypes,
  });

  FlutterCountry country;

  List<FlutterIdType?> idTypes;

  Object encode() {
    return <Object?>[
      country,
      idTypes,
    ];
  }

  static FlutterValidDocument decode(Object result) {
    result as List<Object?>;
    return FlutterValidDocument(
      country: result[0]! as FlutterCountry,
      idTypes: (result[1] as List<Object?>?)!.cast<FlutterIdType?>(),
    );
  }
}

class FlutterCountry {
  FlutterCountry({
    required this.code,
    required this.continent,
    required this.name,
  });

  String code;

  String continent;

  String name;

  Object encode() {
    return <Object?>[
      code,
      continent,
      name,
    ];
  }

  static FlutterCountry decode(Object result) {
    result as List<Object?>;
    return FlutterCountry(
      code: result[0]! as String,
      continent: result[1]! as String,
      name: result[2]! as String,
    );
  }
}

class FlutterIdType {
  FlutterIdType({
    required this.code,
    required this.example,
    required this.hasBack,
    required this.name,
  });

  String code;

  List<String?> example;

  bool hasBack;

  String name;

  Object encode() {
    return <Object?>[
      code,
      example,
      hasBack,
      name,
    ];
  }

  static FlutterIdType decode(Object result) {
    result as List<Object?>;
    return FlutterIdType(
      code: result[0]! as String,
      example: (result[1] as List<Object?>?)!.cast<String?>(),
      hasBack: result[2]! as bool,
      name: result[3]! as String,
    );
  }
}

class FlutterServicesResponse {
  FlutterServicesResponse({
    required this.bankCodes,
    required this.hostedWeb,
  });

  List<FlutterBankCode?> bankCodes;

  FlutterHostedWeb hostedWeb;

  Object encode() {
    return <Object?>[
      bankCodes,
      hostedWeb,
    ];
  }

  static FlutterServicesResponse decode(Object result) {
    result as List<Object?>;
    return FlutterServicesResponse(
      bankCodes: (result[0] as List<Object?>?)!.cast<FlutterBankCode?>(),
      hostedWeb: result[1]! as FlutterHostedWeb,
    );
  }
}

class FlutterBankCode {
  FlutterBankCode({
    required this.name,
    required this.code,
  });

  String name;

  String code;

  Object encode() {
    return <Object?>[
      name,
      code,
    ];
  }

  static FlutterBankCode decode(Object result) {
    result as List<Object?>;
    return FlutterBankCode(
      name: result[0]! as String,
      code: result[1]! as String,
    );
  }
}

class FlutterHostedWeb {
  FlutterHostedWeb({
    required this.basicKyc,
    required this.biometricKyc,
    required this.enhancedKyc,
    required this.documentVerification,
    required this.enhancedKycSmartSelfie,
    required this.enhancedDocumentVerification,
  });

  Map<String?, FlutterCountryInfo?> basicKyc;

  Map<String?, FlutterCountryInfo?> biometricKyc;

  Map<String?, FlutterCountryInfo?> enhancedKyc;

  Map<String?, FlutterCountryInfo?> documentVerification;

  Map<String?, FlutterCountryInfo?> enhancedKycSmartSelfie;

  Map<String?, FlutterCountryInfo?> enhancedDocumentVerification;

  Object encode() {
    return <Object?>[
      basicKyc,
      biometricKyc,
      enhancedKyc,
      documentVerification,
      enhancedKycSmartSelfie,
      enhancedDocumentVerification,
    ];
  }

  static FlutterHostedWeb decode(Object result) {
    result as List<Object?>;
    return FlutterHostedWeb(
      basicKyc: (result[0] as Map<Object?, Object?>?)!.cast<String?, FlutterCountryInfo?>(),
      biometricKyc: (result[1] as Map<Object?, Object?>?)!.cast<String?, FlutterCountryInfo?>(),
      enhancedKyc: (result[2] as Map<Object?, Object?>?)!.cast<String?, FlutterCountryInfo?>(),
      documentVerification: (result[3] as Map<Object?, Object?>?)!.cast<String?, FlutterCountryInfo?>(),
      enhancedKycSmartSelfie: (result[4] as Map<Object?, Object?>?)!.cast<String?, FlutterCountryInfo?>(),
      enhancedDocumentVerification: (result[5] as Map<Object?, Object?>?)!.cast<String?, FlutterCountryInfo?>(),
    );
  }
}

class FlutterCountryInfo {
  FlutterCountryInfo({
    required this.countryCode,
    required this.name,
    required this.availableIdTypes,
  });

  String countryCode;

  String name;

  List<FlutterAvailableIdType?> availableIdTypes;

  Object encode() {
    return <Object?>[
      countryCode,
      name,
      availableIdTypes,
    ];
  }

  static FlutterCountryInfo decode(Object result) {
    result as List<Object?>;
    return FlutterCountryInfo(
      countryCode: result[0]! as String,
      name: result[1]! as String,
      availableIdTypes: (result[2] as List<Object?>?)!.cast<FlutterAvailableIdType?>(),
    );
  }
}

class FlutterAvailableIdType {
  FlutterAvailableIdType({
    required this.idTypeKey,
    required this.label,
    required this.requiredFields,
    this.testData,
    this.idNumberRegex,
  });

  String idTypeKey;

  String label;

  List<String?> requiredFields;

  String? testData;

  String? idNumberRegex;

  Object encode() {
    return <Object?>[
      idTypeKey,
      label,
      requiredFields,
      testData,
      idNumberRegex,
    ];
  }

  static FlutterAvailableIdType decode(Object result) {
    result as List<Object?>;
    return FlutterAvailableIdType(
      idTypeKey: result[0]! as String,
      label: result[1]! as String,
      requiredFields: (result[2] as List<Object?>?)!.cast<String?>(),
      testData: result[3] as String?,
      idNumberRegex: result[4] as String?,
    );
  }
}

class FlutterConfig {
  FlutterConfig({
    required this.partnerId,
    required this.authToken,
    required this.prodBaseUrl,
    required this.sandboxBaseUrl,
  });

  String partnerId;

  String authToken;

  String prodBaseUrl;

  String sandboxBaseUrl;

  Object encode() {
    return <Object?>[
      partnerId,
      authToken,
      prodBaseUrl,
      sandboxBaseUrl,
    ];
  }

  static FlutterConfig decode(Object result) {
    result as List<Object?>;
    return FlutterConfig(
      partnerId: result[0]! as String,
      authToken: result[1]! as String,
      prodBaseUrl: result[2]! as String,
      sandboxBaseUrl: result[3]! as String,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is FlutterJobType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is FlutterJobTypeV2) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is FlutterImageType) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is FlutterActionResult) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is FlutterSmartSelfieStatus) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is FlutterConsentInformation) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterPartnerParams) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterAuthenticationRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterAuthenticationResponse) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterPrepUploadRequest) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterPrepUploadResponse) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterUploadRequest) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterUploadImageInfo) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterIdInfo) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterEnhancedKycResponse) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterActions) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterConsentInfo) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterEnhancedKycRequest) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterEnhancedKycAsyncResponse) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterImageLinks) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterAntifraud) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterSuspectUser) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterJobStatusRequest) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterSmartSelfieJobResult) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterSmartSelfieJobStatusResponse) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterSmartSelfieResponse) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterDocumentVerificationJobResult) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterDocumentVerificationJobStatusResponse) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterBiometricKycJobResult) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterBiometricKycJobStatusResponse) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterEnhancedDocumentVerificationJobResult) {
      buffer.putUint8(159);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterEnhancedDocumentVerificationJobStatusResponse) {
      buffer.putUint8(160);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterProductsConfigRequest) {
      buffer.putUint8(161);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterProductsConfigResponse) {
      buffer.putUint8(162);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterIdSelection) {
      buffer.putUint8(163);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterValidDocumentsResponse) {
      buffer.putUint8(164);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterValidDocument) {
      buffer.putUint8(165);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterCountry) {
      buffer.putUint8(166);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterIdType) {
      buffer.putUint8(167);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterServicesResponse) {
      buffer.putUint8(168);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterBankCode) {
      buffer.putUint8(169);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterHostedWeb) {
      buffer.putUint8(170);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterCountryInfo) {
      buffer.putUint8(171);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterAvailableIdType) {
      buffer.putUint8(172);
      writeValue(buffer, value.encode());
    }    else if (value is FlutterConfig) {
      buffer.putUint8(173);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterJobType.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterJobTypeV2.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterImageType.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterActionResult.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FlutterSmartSelfieStatus.values[value];
      case 134: 
        return FlutterConsentInformation.decode(readValue(buffer)!);
      case 135: 
        return FlutterPartnerParams.decode(readValue(buffer)!);
      case 136: 
        return FlutterAuthenticationRequest.decode(readValue(buffer)!);
      case 137: 
        return FlutterAuthenticationResponse.decode(readValue(buffer)!);
      case 138: 
        return FlutterPrepUploadRequest.decode(readValue(buffer)!);
      case 139: 
        return FlutterPrepUploadResponse.decode(readValue(buffer)!);
      case 140: 
        return FlutterUploadRequest.decode(readValue(buffer)!);
      case 141: 
        return FlutterUploadImageInfo.decode(readValue(buffer)!);
      case 142: 
        return FlutterIdInfo.decode(readValue(buffer)!);
      case 143: 
        return FlutterEnhancedKycResponse.decode(readValue(buffer)!);
      case 144: 
        return FlutterActions.decode(readValue(buffer)!);
      case 145: 
        return FlutterConsentInfo.decode(readValue(buffer)!);
      case 146: 
        return FlutterEnhancedKycRequest.decode(readValue(buffer)!);
      case 147: 
        return FlutterEnhancedKycAsyncResponse.decode(readValue(buffer)!);
      case 148: 
        return FlutterImageLinks.decode(readValue(buffer)!);
      case 149: 
        return FlutterAntifraud.decode(readValue(buffer)!);
      case 150: 
        return FlutterSuspectUser.decode(readValue(buffer)!);
      case 151: 
        return FlutterJobStatusRequest.decode(readValue(buffer)!);
      case 152: 
        return FlutterSmartSelfieJobResult.decode(readValue(buffer)!);
      case 153: 
        return FlutterSmartSelfieJobStatusResponse.decode(readValue(buffer)!);
      case 154: 
        return FlutterSmartSelfieResponse.decode(readValue(buffer)!);
      case 155: 
        return FlutterDocumentVerificationJobResult.decode(readValue(buffer)!);
      case 156: 
        return FlutterDocumentVerificationJobStatusResponse.decode(readValue(buffer)!);
      case 157: 
        return FlutterBiometricKycJobResult.decode(readValue(buffer)!);
      case 158: 
        return FlutterBiometricKycJobStatusResponse.decode(readValue(buffer)!);
      case 159: 
        return FlutterEnhancedDocumentVerificationJobResult.decode(readValue(buffer)!);
      case 160: 
        return FlutterEnhancedDocumentVerificationJobStatusResponse.decode(readValue(buffer)!);
      case 161: 
        return FlutterProductsConfigRequest.decode(readValue(buffer)!);
      case 162: 
        return FlutterProductsConfigResponse.decode(readValue(buffer)!);
      case 163: 
        return FlutterIdSelection.decode(readValue(buffer)!);
      case 164: 
        return FlutterValidDocumentsResponse.decode(readValue(buffer)!);
      case 165: 
        return FlutterValidDocument.decode(readValue(buffer)!);
      case 166: 
        return FlutterCountry.decode(readValue(buffer)!);
      case 167: 
        return FlutterIdType.decode(readValue(buffer)!);
      case 168: 
        return FlutterServicesResponse.decode(readValue(buffer)!);
      case 169: 
        return FlutterBankCode.decode(readValue(buffer)!);
      case 170: 
        return FlutterHostedWeb.decode(readValue(buffer)!);
      case 171:
        return FlutterCountryInfo.decode(readValue(buffer)!);
      case 172:
        return FlutterAvailableIdType.decode(readValue(buffer)!);
      case 173:
        return FlutterConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class SmileIDApi {
  /// Constructor for [SmileIDApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SmileIDApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initializeWithApiKey(String apiKey, FlutterConfig config, bool useSandbox, bool enableCrashReporting) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.initializeWithApiKey$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[apiKey, config, useSandbox, enableCrashReporting]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> initializeWithConfig(FlutterConfig config, bool useSandbox, bool enableCrashReporting) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.initializeWithConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config, useSandbox, enableCrashReporting]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> initialize(bool useSandbox) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.initialize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[useSandbox]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCallbackUrl(String callbackUrl) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.setCallbackUrl$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[callbackUrl]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAllowOfflineMode(bool allowOfflineMode) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.setAllowOfflineMode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[allowOfflineMode]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<String>> getSubmittedJobs() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getSubmittedJobs$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String>();
    }
  }

  Future<List<String>> getUnsubmittedJobs() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getUnsubmittedJobs$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String>();
    }
  }

  Future<void> cleanup(String jobId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.cleanup$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[jobId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> cleanupJobs(List<String> jobIds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.cleanupJobs$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[jobIds]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> submitJob(String jobId, bool deleteFilesOnSuccess) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.submitJob$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[jobId, deleteFilesOnSuccess]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<FlutterAuthenticationResponse> authenticate(FlutterAuthenticationRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.authenticate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterAuthenticationResponse?)!;
    }
  }

  Future<FlutterPrepUploadResponse> prepUpload(FlutterPrepUploadRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.prepUpload$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterPrepUploadResponse?)!;
    }
  }

  Future<void> upload(String url, FlutterUploadRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.upload$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[url, request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<FlutterEnhancedKycResponse> doEnhancedKyc(FlutterEnhancedKycRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.doEnhancedKyc$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterEnhancedKycResponse?)!;
    }
  }

  Future<FlutterEnhancedKycAsyncResponse> doEnhancedKycAsync(FlutterEnhancedKycRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.doEnhancedKycAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterEnhancedKycAsyncResponse?)!;
    }
  }

  Future<FlutterSmartSelfieJobStatusResponse> getSmartSelfieJobStatus(FlutterJobStatusRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getSmartSelfieJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterSmartSelfieJobStatusResponse?)!;
    }
  }

  Future<FlutterSmartSelfieResponse> doSmartSelfieEnrollment(String signature, String timestamp, String selfieImage, List<String> livenessImages, String userId, Map<String?, String?>? partnerParams, String? callbackUrl, int? sandboxResult, bool? allowNewEnroll) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.doSmartSelfieEnrollment$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[signature, timestamp, selfieImage, livenessImages, userId, partnerParams, callbackUrl, sandboxResult, allowNewEnroll]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterSmartSelfieResponse?)!;
    }
  }

  Future<FlutterSmartSelfieResponse> doSmartSelfieAuthentication(String signature, String timestamp, String selfieImage, List<String> livenessImages, String userId, Map<String?, String?>? partnerParams, String? callbackUrl, int? sandboxResult) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.doSmartSelfieAuthentication$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[signature, timestamp, selfieImage, livenessImages, userId, partnerParams, callbackUrl, sandboxResult]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterSmartSelfieResponse?)!;
    }
  }

  Future<FlutterDocumentVerificationJobStatusResponse> getDocumentVerificationJobStatus(FlutterJobStatusRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getDocumentVerificationJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterDocumentVerificationJobStatusResponse?)!;
    }
  }

  Future<FlutterBiometricKycJobStatusResponse> getBiometricKycJobStatus(FlutterJobStatusRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getBiometricKycJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterBiometricKycJobStatusResponse?)!;
    }
  }

  Future<FlutterEnhancedDocumentVerificationJobStatusResponse> getEnhancedDocumentVerificationJobStatus(FlutterJobStatusRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getEnhancedDocumentVerificationJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterEnhancedDocumentVerificationJobStatusResponse?)!;
    }
  }

  Future<FlutterProductsConfigResponse> getProductsConfig(FlutterProductsConfigRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getProductsConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterProductsConfigResponse?)!;
    }
  }

  Future<FlutterValidDocumentsResponse> getValidDocuments(FlutterProductsConfigRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getValidDocuments$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterValidDocumentsResponse?)!;
    }
  }

  Future<FlutterServicesResponse> getServices() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.getServices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterServicesResponse?)!;
    }
  }

  Future<FlutterSmartSelfieJobStatusResponse> pollSmartSelfieJobStatus(FlutterJobStatusRequest request, int interval, int numAttempts) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.pollSmartSelfieJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request, interval, numAttempts]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterSmartSelfieJobStatusResponse?)!;
    }
  }

  Future<FlutterDocumentVerificationJobStatusResponse> pollDocumentVerificationJobStatus(FlutterJobStatusRequest request, int interval, int numAttempts) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.pollDocumentVerificationJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request, interval, numAttempts]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterDocumentVerificationJobStatusResponse?)!;
    }
  }

  Future<FlutterBiometricKycJobStatusResponse> pollBiometricKycJobStatus(FlutterJobStatusRequest request, int interval, int numAttempts) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.pollBiometricKycJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request, interval, numAttempts]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterBiometricKycJobStatusResponse?)!;
    }
  }

  Future<FlutterEnhancedDocumentVerificationJobStatusResponse> pollEnhancedDocumentVerificationJobStatus(FlutterJobStatusRequest request, int interval, int numAttempts) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.smileid.SmileIDApi.pollEnhancedDocumentVerificationJobStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[request, interval, numAttempts]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FlutterEnhancedDocumentVerificationJobStatusResponse?)!;
    }
  }
}
